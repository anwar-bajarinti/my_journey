
STM32F446RE_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000474  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000638  08000640  00001640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000638  08000638  00001640  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000638  08000638  00001640  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000638  08000640  00001640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000638  08000638  00001638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800063c  0800063c  0000163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000640  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000640  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000763  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000262  00000000  00000000  00001dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000072  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000123f  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e02  00000000  00000000  00003389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004a11  00000000  00000000  0000418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00008b9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  00008be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00008db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000620 	.word	0x08000620

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000620 	.word	0x08000620

08000204 <GPIO_PeriClockControl>:

#include "STM32F446RE_GPIO_DRIVER.h"

// Peripheral Clock Setup
void GPIO_PeriClockControl(GPIO_Reg_Def *pGPIOX, uint8_t EnOrDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <GPIO_PeriClockControl+0xc2>
    {
        if (pGPIOX == GPIOA) { GPIOA_PCLK_EN(); }
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a32      	ldr	r2, [pc, #200]	@ (80002e4 <GPIO_PeriClockControl+0xe0>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x28>
 800021e:	4b32      	ldr	r3, [pc, #200]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a31      	ldr	r2, [pc, #196]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
    else
    {
        if (pGPIOX == GPIOA) { GPIOA_PCLK_DI(); }
        // Add other disable cases if needed
    }
}
 800022a:	e056      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOB) { GPIOB_PCLK_EN(); }
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a2f      	ldr	r2, [pc, #188]	@ (80002ec <GPIO_PeriClockControl+0xe8>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x3e>
 8000234:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a2b      	ldr	r2, [pc, #172]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000240:	e04b      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOC) { GPIOC_PCLK_EN(); }
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a2a      	ldr	r2, [pc, #168]	@ (80002f0 <GPIO_PeriClockControl+0xec>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x54>
 800024a:	4b27      	ldr	r3, [pc, #156]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a26      	ldr	r2, [pc, #152]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e040      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOD) { GPIOD_PCLK_EN(); }
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a26      	ldr	r2, [pc, #152]	@ (80002f4 <GPIO_PeriClockControl+0xf0>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x6a>
 8000260:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a20      	ldr	r2, [pc, #128]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026c:	e035      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOE) { GPIOE_PCLK_EN(); }
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a21      	ldr	r2, [pc, #132]	@ (80002f8 <GPIO_PeriClockControl+0xf4>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x80>
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	4a1b      	ldr	r2, [pc, #108]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000282:	e02a      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOF) { GPIOF_PCLK_EN(); }
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a1d      	ldr	r2, [pc, #116]	@ (80002fc <GPIO_PeriClockControl+0xf8>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x96>
 800028c:	4b16      	ldr	r3, [pc, #88]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a15      	ldr	r2, [pc, #84]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000298:	e01f      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOG) { GPIOG_PCLK_EN(); }
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a18      	ldr	r2, [pc, #96]	@ (8000300 <GPIO_PeriClockControl+0xfc>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xac>
 80002a2:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a10      	ldr	r2, [pc, #64]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ae:	e014      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        else if (pGPIOX == GPIOH) { GPIOH_PCLK_EN(); }
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a14      	ldr	r2, [pc, #80]	@ (8000304 <GPIO_PeriClockControl+0x100>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d110      	bne.n	80002da <GPIO_PeriClockControl+0xd6>
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c4:	e009      	b.n	80002da <GPIO_PeriClockControl+0xd6>
        if (pGPIOX == GPIOA) { GPIOA_PCLK_DI(); }
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a06      	ldr	r2, [pc, #24]	@ (80002e4 <GPIO_PeriClockControl+0xe0>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d105      	bne.n	80002da <GPIO_PeriClockControl+0xd6>
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <GPIO_PeriClockControl+0xe4>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020400 	.word	0x40020400
 80002f0:	40020800 	.word	0x40020800
 80002f4:	40020c00 	.word	0x40020c00
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40021400 	.word	0x40021400
 8000300:	40021800 	.word	0x40021800
 8000304:	40021c00 	.word	0x40021c00

08000308 <GPIO_Init>:

// Init and De-init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]

    // 1. Configure the mode of the pin
    if (pGPIOHandle->GPIO_Pin_Config.GPIO_PiMode <= GPIO_MODE_ANALOG)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	795b      	ldrb	r3, [r3, #5]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d81f      	bhi.n	800035c <GPIO_Init+0x54>
    {
        temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PiMode << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	461a      	mov	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	fa02 f303 	lsl.w	r3, r2, r3
 800032c:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOX->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber)); // Clear bits
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	2103      	movs	r1, #3
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	4619      	mov	r1, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	400a      	ands	r2, r1
 800034a:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOX->MODER |= temp; // Set bits
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6819      	ldr	r1, [r3, #0]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	430a      	orrs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
    {
        // Interrupt mode configuration would go here
    }

    // 2. Configure the speed
    temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	799b      	ldrb	r3, [r3, #6]
 8000360:	461a      	mov	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	791b      	ldrb	r3, [r3, #4]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	fa02 f303 	lsl.w	r3, r2, r3
 800036c:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOX->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	689a      	ldr	r2, [r3, #8]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	791b      	ldrb	r3, [r3, #4]
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	2103      	movs	r1, #3
 800037c:	fa01 f303 	lsl.w	r3, r1, r3
 8000380:	43db      	mvns	r3, r3
 8000382:	4619      	mov	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	400a      	ands	r2, r1
 800038a:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6899      	ldr	r1, [r3, #8]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	430a      	orrs	r2, r1
 800039a:	609a      	str	r2, [r3, #8]

    // 3. Configure the pupd settings
    temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinPupdControl << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	79db      	ldrb	r3, [r3, #7]
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	791b      	ldrb	r3, [r3, #4]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOX->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	2103      	movs	r1, #3
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4619      	mov	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	400a      	ands	r2, r1
 80003ca:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOX->PUPDR |= temp;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	68d9      	ldr	r1, [r3, #12]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	430a      	orrs	r2, r1
 80003da:	60da      	str	r2, [r3, #12]

    // 4. Configure the output type
    temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinOpType << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7a1b      	ldrb	r3, [r3, #8]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOX->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	685a      	ldr	r2, [r3, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	4619      	mov	r1, r3
 80003f8:	2301      	movs	r3, #1
 80003fa:	408b      	lsls	r3, r1
 80003fc:	43db      	mvns	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	400a      	ands	r2, r1
 8000406:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOX->OTYPER |= temp;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6859      	ldr	r1, [r3, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	430a      	orrs	r2, r1
 8000416:	605a      	str	r2, [r3, #4]

    // 5. Configure the alternate functionality
    if (pGPIOHandle->GPIO_Pin_Config.GPIO_PiMode == GPIO_MODE_ALTFN)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d131      	bne.n	8000484 <GPIO_Init+0x17c>
    {
        uint8_t temp1, temp2;
        temp1 = pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber / 8;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	72fb      	strb	r3, [r7, #11]
        temp2 = pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber % 8;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	f003 0307 	and.w	r3, r3, #7
 8000430:	72bb      	strb	r3, [r7, #10]
        pGPIOHandle->pGPIOX->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	7afa      	ldrb	r2, [r7, #11]
 8000438:	3208      	adds	r2, #8
 800043a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800043e:	7abb      	ldrb	r3, [r7, #10]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	220f      	movs	r2, #15
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	7afa      	ldrb	r2, [r7, #11]
 8000452:	4001      	ands	r1, r0
 8000454:	3208      	adds	r2, #8
 8000456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOX->AFR[temp1] |= (pGPIOHandle->GPIO_Pin_Config.GPIO_PinAltFunMode << (4 * temp2));
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	7afa      	ldrb	r2, [r7, #11]
 8000460:	3208      	adds	r2, #8
 8000462:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7a5b      	ldrb	r3, [r3, #9]
 800046a:	461a      	mov	r2, r3
 800046c:	7abb      	ldrb	r3, [r7, #10]
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	4618      	mov	r0, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	7afa      	ldrb	r2, [r7, #11]
 800047c:	4301      	orrs	r1, r0
 800047e:	3208      	adds	r2, #8
 8000480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <GPIO_ReadFromInputPin>:
    else if (pGPIOX == GPIOH) { GPIOH_REG_RESET(); }
}

// Data Read and Write
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_Def *pGPIOX, uint8_t PinNumber)
{
 800048e:	b480      	push	{r7}
 8000490:	b085      	sub	sp, #20
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t)((pGPIOX->IDR >> PinNumber) & 0x00000001);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	691a      	ldr	r2, [r3, #16]
 800049e:	78fb      	ldrb	r3, [r7, #3]
 80004a0:	fa22 f303 	lsr.w	r3, r2, r3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
    return value;
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <GPIO_ToggleOutputPin>:
{
    pGPIOX->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_Reg_Def *pGPIOX, uint8_t PinNumber)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
    pGPIOX->ODR ^= (1 << PinNumber);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	78fa      	ldrb	r2, [r7, #3]
 80004ca:	2101      	movs	r1, #1
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	405a      	eors	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	615a      	str	r2, [r3, #20]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <delay>:

// -------------------------------------------------------------------
// Simple software delay (not accurate, just for button debouncing)
// -------------------------------------------------------------------
void delay(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 500000; i++);  // crude delay loop
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	e002      	b.n	80004f2 <delay+0x12>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a04      	ldr	r2, [pc, #16]	@ (8000508 <delay+0x28>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d9f8      	bls.n	80004ec <delay+0xc>
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	0007a11f 	.word	0x0007a11f

0800050c <main>:

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
    // Create handle structures for LED and Button
    GPIO_Handle_t GpioLed, GpioBtn;

    // ------------------ LED Configuration ------------------
    // PA5 → LED (LD2 on Nucleo)
    GpioLed.pGPIOX = GPIOA;                                 // Select GPIO Port A
 8000512:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <main+0x70>)
 8000514:	60fb      	str	r3, [r7, #12]
    GpioLed.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NO_5;  // Pin 5 (PA5)
 8000516:	2305      	movs	r3, #5
 8000518:	743b      	strb	r3, [r7, #16]
    GpioLed.GPIO_Pin_Config.GPIO_PiMode = GPIO_MODE_OUT;     // Output mode
 800051a:	2301      	movs	r3, #1
 800051c:	747b      	strb	r3, [r7, #17]
    GpioLed.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_SPEED_FAST; // Fast speed
 800051e:	2302      	movs	r3, #2
 8000520:	74bb      	strb	r3, [r7, #18]
    GpioLed.GPIO_Pin_Config.GPIO_PinOpType = GPIO_OP_TYPE_OD;// Open-drain output
 8000522:	2301      	movs	r3, #1
 8000524:	753b      	strb	r3, [r7, #20]
    GpioLed.GPIO_Pin_Config.GPIO_PinPupdControl = GPIO_PIN_PU; // Enable internal pull-up
 8000526:	2301      	movs	r3, #1
 8000528:	74fb      	strb	r3, [r7, #19]

    // ------------------ Button Configuration ------------------
    // PC13 → User Button (blue button on Nucleo)
    GpioBtn.pGPIOX = GPIOC;                                  // Select GPIO Port C
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <main+0x74>)
 800052c:	603b      	str	r3, [r7, #0]
    GpioBtn.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NO_13;  // Pin 13 (PC13)
 800052e:	230d      	movs	r3, #13
 8000530:	713b      	strb	r3, [r7, #4]
    GpioBtn.GPIO_Pin_Config.GPIO_PiMode = GPIO_MODE_IN;       // Input mode
 8000532:	2300      	movs	r3, #0
 8000534:	717b      	strb	r3, [r7, #5]
    GpioBtn.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_SPEED_FAST;  // Fast input
 8000536:	2302      	movs	r3, #2
 8000538:	71bb      	strb	r3, [r7, #6]
    GpioBtn.GPIO_Pin_Config.GPIO_PinPupdControl = GPIO_NO_PUPD; // No pull-up/pull-down (external circuit handles it)
 800053a:	2300      	movs	r3, #0
 800053c:	71fb      	strb	r3, [r7, #7]

    // ------------------ Enable Peripheral Clocks ------------------
    GPIO_PeriClockControl(GPIOA, ENABLE);  // Enable clock for Port A (for LED)
 800053e:	2101      	movs	r1, #1
 8000540:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0x70>)
 8000542:	f7ff fe5f 	bl	8000204 <GPIO_PeriClockControl>
    GPIO_PeriClockControl(GPIOC, ENABLE);  // Enable clock for Port C (for Button)
 8000546:	2101      	movs	r1, #1
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <main+0x74>)
 800054a:	f7ff fe5b 	bl	8000204 <GPIO_PeriClockControl>

    // ------------------ Initialize GPIOs ------------------
    GPIO_Init(&GpioLed);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fed8 	bl	8000308 <GPIO_Init>
    GPIO_Init(&GpioBtn);
 8000558:	463b      	mov	r3, r7
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fed4 	bl	8000308 <GPIO_Init>

    // ------------------ Main Loop ------------------
    while (1)
    {
        // Read button state (returns 0 when pressed, 1 when released)
        if (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == PRESSED)
 8000560:	210d      	movs	r1, #13
 8000562:	4807      	ldr	r0, [pc, #28]	@ (8000580 <main+0x74>)
 8000564:	f7ff ff93 	bl	800048e <GPIO_ReadFromInputPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f8      	bne.n	8000560 <main+0x54>
        {
            delay(); // simple debounce delay
 800056e:	f7ff ffb7 	bl	80004e0 <delay>

            // Toggle LED state (ON ↔ OFF)
            GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000572:	2105      	movs	r1, #5
 8000574:	4801      	ldr	r0, [pc, #4]	@ (800057c <main+0x70>)
 8000576:	f7ff ff9f 	bl	80004b8 <GPIO_ToggleOutputPin>
        if (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == PRESSED)
 800057a:	e7f1      	b.n	8000560 <main+0x54>
 800057c:	40020000 	.word	0x40020000
 8000580:	40020800 	.word	0x40020800

08000584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	@ (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000588:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	@ (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005b2:	f000 f811 	bl	80005d8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005b6:	f7ff ffa9 	bl	800050c <main>

080005ba <LoopForever>:

LoopForever:
  b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005c8:	08000640 	.word	0x08000640
  ldr r2, =_sbss
 80005cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005d0:	2000001c 	.word	0x2000001c

080005d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>
	...

080005d8 <__libc_init_array>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	4d0d      	ldr	r5, [pc, #52]	@ (8000610 <__libc_init_array+0x38>)
 80005dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000614 <__libc_init_array+0x3c>)
 80005de:	1b64      	subs	r4, r4, r5
 80005e0:	10a4      	asrs	r4, r4, #2
 80005e2:	2600      	movs	r6, #0
 80005e4:	42a6      	cmp	r6, r4
 80005e6:	d109      	bne.n	80005fc <__libc_init_array+0x24>
 80005e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000618 <__libc_init_array+0x40>)
 80005ea:	4c0c      	ldr	r4, [pc, #48]	@ (800061c <__libc_init_array+0x44>)
 80005ec:	f000 f818 	bl	8000620 <_init>
 80005f0:	1b64      	subs	r4, r4, r5
 80005f2:	10a4      	asrs	r4, r4, #2
 80005f4:	2600      	movs	r6, #0
 80005f6:	42a6      	cmp	r6, r4
 80005f8:	d105      	bne.n	8000606 <__libc_init_array+0x2e>
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000600:	4798      	blx	r3
 8000602:	3601      	adds	r6, #1
 8000604:	e7ee      	b.n	80005e4 <__libc_init_array+0xc>
 8000606:	f855 3b04 	ldr.w	r3, [r5], #4
 800060a:	4798      	blx	r3
 800060c:	3601      	adds	r6, #1
 800060e:	e7f2      	b.n	80005f6 <__libc_init_array+0x1e>
 8000610:	08000638 	.word	0x08000638
 8000614:	08000638 	.word	0x08000638
 8000618:	08000638 	.word	0x08000638
 800061c:	0800063c 	.word	0x0800063c

08000620 <_init>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr

0800062c <_fini>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr
