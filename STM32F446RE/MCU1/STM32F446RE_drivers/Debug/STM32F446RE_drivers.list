
STM32F446RE_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001888  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001a58  08001a58  00002a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aac  08001aac  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001aac  08001aac  00002aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ab4  08001ab4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ab4  08001ab4  00002ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ab8  08001ab8  00002ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001abc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001b18  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001b18  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011eb  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055a  00000000  00000000  00004271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000047d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011d  00000000  00000000  00004968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fc1  00000000  00000000  00004a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021fa  00000000  00000000  00007a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000abd1  00000000  00000000  00009c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00014811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d18  00000000  00000000  00014854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0001556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001a40 	.word	0x08001a40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001a40 	.word	0x08001a40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClockControl>:
 * @param[in]         - EnOrDi: ENABLE or DISABLE macros
 *
 * @return            - none
 */
void GPIO_PeriClockControl(GPIO_RegDef *pGPIOx, uint8_t EnOrDi)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d157      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
    {
        if (pGPIOx == GPIOA) { GPIOA_PCLK_EN(); }
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a59      	ldr	r2, [pc, #356]	@ (800042c <GPIO_PeriClockControl+0x17c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
 80002ca:	4b59      	ldr	r3, [pc, #356]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a58      	ldr	r2, [pc, #352]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (pGPIOx == GPIOE) { GPIOE_PCLK_DI(); }
        else if (pGPIOx == GPIOF) { GPIOF_PCLK_DI(); }
        else if (pGPIOx == GPIOG) { GPIOG_PCLK_DI(); }
        else if (pGPIOx == GPIOH) { GPIOH_PCLK_DI(); }
    }
}
 80002d6:	e0a3      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOB) { GPIOB_PCLK_EN(); }
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a56      	ldr	r2, [pc, #344]	@ (8000434 <GPIO_PeriClockControl+0x184>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
 80002e0:	4b53      	ldr	r3, [pc, #332]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a52      	ldr	r2, [pc, #328]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	e098      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOC) { GPIOC_PCLK_EN(); }
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a51      	ldr	r2, [pc, #324]	@ (8000438 <GPIO_PeriClockControl+0x188>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
 80002f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000302:	e08d      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOD) { GPIOD_PCLK_EN(); }
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a4d      	ldr	r2, [pc, #308]	@ (800043c <GPIO_PeriClockControl+0x18c>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
 800030c:	4b48      	ldr	r3, [pc, #288]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a47      	ldr	r2, [pc, #284]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000318:	e082      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOE) { GPIOE_PCLK_EN(); }
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a48      	ldr	r2, [pc, #288]	@ (8000440 <GPIO_PeriClockControl+0x190>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
 8000322:	4b43      	ldr	r3, [pc, #268]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a42      	ldr	r2, [pc, #264]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032e:	e077      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOF) { GPIOF_PCLK_EN(); }
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a44      	ldr	r2, [pc, #272]	@ (8000444 <GPIO_PeriClockControl+0x194>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
 8000338:	4b3d      	ldr	r3, [pc, #244]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a3c      	ldr	r2, [pc, #240]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000344:	e06c      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOG) { GPIOG_PCLK_EN(); }
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a3f      	ldr	r2, [pc, #252]	@ (8000448 <GPIO_PeriClockControl+0x198>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
 800034e:	4b38      	ldr	r3, [pc, #224]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a37      	ldr	r2, [pc, #220]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035a:	e061      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOH) { GPIOH_PCLK_EN(); }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a3b      	ldr	r2, [pc, #236]	@ (800044c <GPIO_PeriClockControl+0x19c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d15d      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
 8000364:	4b32      	ldr	r3, [pc, #200]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a31      	ldr	r2, [pc, #196]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000370:	e056      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        if (pGPIOx == GPIOA) { GPIOA_PCLK_DI(); }
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a2d      	ldr	r2, [pc, #180]	@ (800042c <GPIO_PeriClockControl+0x17c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0xd8>
 800037a:	4b2d      	ldr	r3, [pc, #180]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a2c      	ldr	r2, [pc, #176]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000386:	e04b      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOB) { GPIOB_PCLK_DI(); }
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a2a      	ldr	r2, [pc, #168]	@ (8000434 <GPIO_PeriClockControl+0x184>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0xee>
 8000390:	4b27      	ldr	r3, [pc, #156]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000394:	4a26      	ldr	r2, [pc, #152]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000396:	f023 0302 	bic.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039c:	e040      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOC) { GPIOC_PCLK_DI(); }
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a25      	ldr	r2, [pc, #148]	@ (8000438 <GPIO_PeriClockControl+0x188>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x104>
 80003a6:	4b22      	ldr	r3, [pc, #136]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a21      	ldr	r2, [pc, #132]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003ac:	f023 0304 	bic.w	r3, r3, #4
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b2:	e035      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOD) { GPIOD_PCLK_DI(); }
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a21      	ldr	r2, [pc, #132]	@ (800043c <GPIO_PeriClockControl+0x18c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x11a>
 80003bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003c2:	f023 0308 	bic.w	r3, r3, #8
 80003c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c8:	e02a      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOE) { GPIOE_PCLK_DI(); }
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000440 <GPIO_PeriClockControl+0x190>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x130>
 80003d2:	4b17      	ldr	r3, [pc, #92]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	4a16      	ldr	r2, [pc, #88]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003d8:	f023 0310 	bic.w	r3, r3, #16
 80003dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003de:	e01f      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOF) { GPIOF_PCLK_DI(); }
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a18      	ldr	r2, [pc, #96]	@ (8000444 <GPIO_PeriClockControl+0x194>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x146>
 80003e8:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 80003ee:	f023 0320 	bic.w	r3, r3, #32
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f4:	e014      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOG) { GPIOG_PCLK_DI(); }
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a13      	ldr	r2, [pc, #76]	@ (8000448 <GPIO_PeriClockControl+0x198>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x15c>
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000402:	4a0b      	ldr	r2, [pc, #44]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000408:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040a:	e009      	b.n	8000420 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOH) { GPIOH_PCLK_DI(); }
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0f      	ldr	r2, [pc, #60]	@ (800044c <GPIO_PeriClockControl+0x19c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d105      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <GPIO_PeriClockControl+0x180>)
 800041a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40020800 	.word	0x40020800
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40021000 	.word	0x40021000
 8000444:	40021400 	.word	0x40021400
 8000448:	40021800 	.word	0x40021800
 800044c:	40021c00 	.word	0x40021c00

08000450 <GPIO_Init>:
 * - contains the configuration information.
 *
 * @return            - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0; // Temporary register variable
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

    // 0. Enable the peripheral clock before configuring registers
    // <-- NOTE: This is a good practice, though you might do it just once
    //          outside this function before initializing multiple pins.
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff24 	bl	80002b0 <GPIO_PeriClockControl>

    // 1. Configure the mode of the pin
    // <-- FIX: Changed 'GPIO_PiMode' to 'GPIO_PinMode' to match corrected header.
    if (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d820      	bhi.n	80004b2 <GPIO_Init+0x62>
    {
        // Non-interrupt modes (Input, Output, Analog, AF)
        temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	617b      	str	r3, [r7, #20]
        // <-- FIX: Changed 'pGPIOX' to 'pGPIOx' (lowercase) to match corrected header.
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber)); // Clear bits
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2103      	movs	r1, #3
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	4619      	mov	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	400a      	ands	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; // Set bits
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6819      	ldr	r1, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	e0db      	b.n	800066a <GPIO_Init+0x21a>
         * 3. Enable the interrupt delivery from EXTI to NVIC (IMR).
         */

        // 1. Configure the edge trigger
        // <-- FIX: Changed 'GPIO_PiMode' to 'GPIO_PinMode'
        if (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	d117      	bne.n	80004ea <GPIO_Init+0x9a>
        {
        	// Configure the FTSR (Falling Trigger Selection Register)
        	EXTI->FTSR |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80004ba:	4b43      	ldr	r3, [pc, #268]	@ (80005c8 <GPIO_Init+0x178>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a3f      	ldr	r2, [pc, #252]	@ (80005c8 <GPIO_Init+0x178>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	60d3      	str	r3, [r2, #12]
            // Clear the corresponding RTSR bit to be safe
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80004d0:	4b3d      	ldr	r3, [pc, #244]	@ (80005c8 <GPIO_Init+0x178>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a39      	ldr	r2, [pc, #228]	@ (80005c8 <GPIO_Init+0x178>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	6093      	str	r3, [r2, #8]
 80004e8:	e035      	b.n	8000556 <GPIO_Init+0x106>
        }
        // <-- FIX: Changed 'GPIO_PiMode' to 'GPIO_PinMode'
        else if (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b05      	cmp	r3, #5
 80004f0:	d117      	bne.n	8000522 <GPIO_Init+0xd2>
        {
        	// Configure the RTSR (Rising Trigger Selection Register)
        	EXTI->RTSR |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80004f2:	4b35      	ldr	r3, [pc, #212]	@ (80005c8 <GPIO_Init+0x178>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a31      	ldr	r2, [pc, #196]	@ (80005c8 <GPIO_Init+0x178>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
            // Clear the corresponding FTSR bit
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <GPIO_Init+0x178>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	43d2      	mvns	r2, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a2b      	ldr	r2, [pc, #172]	@ (80005c8 <GPIO_Init+0x178>)
 800051c:	400b      	ands	r3, r1
 800051e:	60d3      	str	r3, [r2, #12]
 8000520:	e019      	b.n	8000556 <GPIO_Init+0x106>
        }
        // <-- FIX: Changed 'GPIO_PiMode' to 'GPIO_PinMode'
        else if (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b06      	cmp	r3, #6
 8000528:	d115      	bne.n	8000556 <GPIO_Init+0x106>
        {
        	// Configure both FTSR and RTSR
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <GPIO_Init+0x178>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a23      	ldr	r2, [pc, #140]	@ (80005c8 <GPIO_Init+0x178>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 8000540:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <GPIO_Init+0x178>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <GPIO_Init+0x178>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6093      	str	r3, [r2, #8]
        }

        // 2. Configure the GPIO port selection in SYSCFG_EXTICR
        // (1) Get the port code (A=0, B=1, etc.)
        // <-- FIX: Changed 'pGPIOX' to 'pGPIOx'
         uint8_t portCode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <GPIO_Init+0x17c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d045      	beq.n	80005ec <GPIO_Init+0x19c>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <GPIO_Init+0x180>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d02b      	beq.n	80005c2 <GPIO_Init+0x172>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a19      	ldr	r2, [pc, #100]	@ (80005d4 <GPIO_Init+0x184>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d024      	beq.n	80005be <GPIO_Init+0x16e>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <GPIO_Init+0x188>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d01d      	beq.n	80005ba <GPIO_Init+0x16a>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <GPIO_Init+0x18c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d016      	beq.n	80005b6 <GPIO_Init+0x166>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <GPIO_Init+0x190>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d00f      	beq.n	80005b2 <GPIO_Init+0x162>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a13      	ldr	r2, [pc, #76]	@ (80005e4 <GPIO_Init+0x194>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d008      	beq.n	80005ae <GPIO_Init+0x15e>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <GPIO_Init+0x198>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <GPIO_Init+0x15a>
 80005a6:	2307      	movs	r3, #7
 80005a8:	e021      	b.n	80005ee <GPIO_Init+0x19e>
 80005aa:	2300      	movs	r3, #0
 80005ac:	e01f      	b.n	80005ee <GPIO_Init+0x19e>
 80005ae:	2306      	movs	r3, #6
 80005b0:	e01d      	b.n	80005ee <GPIO_Init+0x19e>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e01b      	b.n	80005ee <GPIO_Init+0x19e>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e019      	b.n	80005ee <GPIO_Init+0x19e>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e017      	b.n	80005ee <GPIO_Init+0x19e>
 80005be:	2302      	movs	r3, #2
 80005c0:	e015      	b.n	80005ee <GPIO_Init+0x19e>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e013      	b.n	80005ee <GPIO_Init+0x19e>
 80005c6:	bf00      	nop
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40021400 	.word	0x40021400
 80005e4:	40021800 	.word	0x40021800
 80005e8:	40021c00 	.word	0x40021c00
 80005ec:	2300      	movs	r3, #0
 80005ee:	74fb      	strb	r3, [r7, #19]

        // (2) Enable SYSCFG clock
         SYSCFG_PCLK_EN();
 80005f0:	4b6a      	ldr	r3, [pc, #424]	@ (800079c <GPIO_Init+0x34c>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a69      	ldr	r2, [pc, #420]	@ (800079c <GPIO_Init+0x34c>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44

        // (3) Configure the correct EXTICR register
         uint8_t reg_idx = pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber / 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	74bb      	strb	r3, [r7, #18]
         uint8_t pin_idx = pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber % 4;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	f003 0303 	and.w	r3, r3, #3
 800060c:	747b      	strb	r3, [r7, #17]

         // <-- NOTE: This logic is correct, good job.
         SYSCFG->EXTICR[reg_idx] &= ~(0xF << (4 * pin_idx)); // Clear
 800060e:	4a64      	ldr	r2, [pc, #400]	@ (80007a0 <GPIO_Init+0x350>)
 8000610:	7cbb      	ldrb	r3, [r7, #18]
 8000612:	3302      	adds	r3, #2
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	7c7b      	ldrb	r3, [r7, #17]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	210f      	movs	r1, #15
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	495e      	ldr	r1, [pc, #376]	@ (80007a0 <GPIO_Init+0x350>)
 8000628:	7cbb      	ldrb	r3, [r7, #18]
 800062a:	4002      	ands	r2, r0
 800062c:	3302      	adds	r3, #2
 800062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         SYSCFG->EXTICR[reg_idx] |= (portCode << (4 * pin_idx)); // Set
 8000632:	4a5b      	ldr	r2, [pc, #364]	@ (80007a0 <GPIO_Init+0x350>)
 8000634:	7cbb      	ldrb	r3, [r7, #18]
 8000636:	3302      	adds	r3, #2
 8000638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800063c:	7cf9      	ldrb	r1, [r7, #19]
 800063e:	7c7b      	ldrb	r3, [r7, #17]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	4618      	mov	r0, r3
 8000648:	4955      	ldr	r1, [pc, #340]	@ (80007a0 <GPIO_Init+0x350>)
 800064a:	7cbb      	ldrb	r3, [r7, #18]
 800064c:	4302      	orrs	r2, r0
 800064e:	3302      	adds	r3, #2
 8000650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        // 3. Enable the EXTI interrupt delivery using IMR (Interrupt Mask Register)
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 8000654:	4b53      	ldr	r3, [pc, #332]	@ (80007a4 <GPIO_Init+0x354>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7912      	ldrb	r2, [r2, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	2201      	movs	r2, #1
 8000660:	408a      	lsls	r2, r1
 8000662:	4611      	mov	r1, r2
 8000664:	4a4f      	ldr	r2, [pc, #316]	@ (80007a4 <GPIO_Init+0x354>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure the speed
    temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	799b      	ldrb	r3, [r3, #6]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
    // <-- FIX: Changed 'pGPIOX' to 'pGPIOx'
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2103      	movs	r1, #3
 800068a:	fa01 f303 	lsl.w	r3, r1, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6899      	ldr	r1, [r3, #8]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	609a      	str	r2, [r3, #8]

    // 3. Configure the pupd settings
    temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinPupdControl << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	79db      	ldrb	r3, [r3, #7]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
    // <-- FIX: Changed 'pGPIOX' to 'pGPIOx'
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	2103      	movs	r1, #3
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68d9      	ldr	r1, [r3, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	60da      	str	r2, [r3, #12]

    // 4. Configure the output type
    temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinOpType << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7a1b      	ldrb	r3, [r3, #8]
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	617b      	str	r3, [r7, #20]
    // <-- FIX: Changed 'pGPIOX' to 'pGPIOx'
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	4619      	mov	r1, r3
 8000706:	2301      	movs	r3, #1
 8000708:	408b      	lsls	r3, r1
 800070a:	43db      	mvns	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	400a      	ands	r2, r1
 8000714:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6859      	ldr	r1, [r3, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	430a      	orrs	r2, r1
 8000724:	605a      	str	r2, [r3, #4]

    // 5. Configure the alternate functionality
    // <-- FIX: Changed 'GPIO_PiMode' to 'GPIO_PinMode'
    if (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	795b      	ldrb	r3, [r3, #5]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d131      	bne.n	8000792 <GPIO_Init+0x342>
    {
        uint8_t temp1, temp2;

        // <-- NOTE: This logic for AFR[0] vs AFR[1] is correct.
        temp1 = pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber / 8; // Chooses AFR[0] or AFR[1]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_Pin_Config.GPIO_PinNumber % 8; // Chooses bit offset in that register
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	73fb      	strb	r3, [r7, #15]

        // <-- FIX: Changed 'pGPIOX' to 'pGPIOx'
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // Clear 4 bits
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	7c3a      	ldrb	r2, [r7, #16]
 8000746:	3208      	adds	r2, #8
 8000748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	220f      	movs	r2, #15
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	7c3a      	ldrb	r2, [r7, #16]
 8000760:	4001      	ands	r1, r0
 8000762:	3208      	adds	r2, #8
 8000764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_Pin_Config.GPIO_PinAltFunMode << (4 * temp2)); // Set 4 bits
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	7c3a      	ldrb	r2, [r7, #16]
 800076e:	3208      	adds	r2, #8
 8000770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7a5b      	ldrb	r3, [r3, #9]
 8000778:	461a      	mov	r2, r3
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	7c3a      	ldrb	r2, [r7, #16]
 800078a:	4301      	orrs	r1, r0
 800078c:	3208      	adds	r2, #8
 800078e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40013c00 	.word	0x40013c00

080007a8 <GPIO_ToggleOutputPin>:
 * @param[in]         - PinNumber: The pin number to toggle (0-15)
 *
 * @return            - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef *pGPIOx, uint8_t PinNumber)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
    // The XOR (^) operator is perfect for toggling a bit
    pGPIOx->ODR ^= (1 << PinNumber);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	78fa      	ldrb	r2, [r7, #3]
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	405a      	eors	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	615a      	str	r2, [r3, #20]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <GPIO_IRQConfig>:
 *
 * @return            - none
 */
// <-- FIX: Removed IRQPriority, it doesn't belong in this function.
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE)
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d133      	bne.n	800084e <GPIO_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	d80a      	bhi.n	8000802 <GPIO_IRQConfig+0x32>
		{
			// Program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80007ec:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <GPIO_IRQConfig+0xf0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a31      	ldr	r2, [pc, #196]	@ (80008c0 <GPIO_IRQConfig+0xf0>)
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6013      	str	r3, [r2, #0]
			// <-- FIX: Use ICER2
			// <-- FIX: Fixed typo 'RQNumber' to 'IRQNumber' (in my head, you didn't have it here)
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}
}
 8000800:	e059      	b.n	80008b6 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b1f      	cmp	r3, #31
 8000806:	d90f      	bls.n	8000828 <GPIO_IRQConfig+0x58>
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b3f      	cmp	r3, #63	@ 0x3f
 800080c:	d80c      	bhi.n	8000828 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <GPIO_IRQConfig+0xf4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	f002 021f 	and.w	r2, r2, #31
 8000818:	2101      	movs	r1, #1
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a28      	ldr	r2, [pc, #160]	@ (80008c4 <GPIO_IRQConfig+0xf4>)
 8000822:	430b      	orrs	r3, r1
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e046      	b.n	80008b6 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b3f      	cmp	r3, #63	@ 0x3f
 800082c:	d943      	bls.n	80008b6 <GPIO_IRQConfig+0xe6>
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b5f      	cmp	r3, #95	@ 0x5f
 8000832:	d840      	bhi.n	80008b6 <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <GPIO_IRQConfig+0xf8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <GPIO_IRQConfig+0xf8>)
 8000848:	430b      	orrs	r3, r1
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	e033      	b.n	80008b6 <GPIO_IRQConfig+0xe6>
		if(IRQNumber <= 31)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b1f      	cmp	r3, #31
 8000852:	d80a      	bhi.n	800086a <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <GPIO_IRQConfig+0xfc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a1a      	ldr	r2, [pc, #104]	@ (80008cc <GPIO_IRQConfig+0xfc>)
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	e025      	b.n	80008b6 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b1f      	cmp	r3, #31
 800086e:	d90f      	bls.n	8000890 <GPIO_IRQConfig+0xc0>
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b3f      	cmp	r3, #63	@ 0x3f
 8000874:	d80c      	bhi.n	8000890 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <GPIO_IRQConfig+0x100>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	f002 021f 	and.w	r2, r2, #31
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <GPIO_IRQConfig+0x100>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e012      	b.n	80008b6 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b3f      	cmp	r3, #63	@ 0x3f
 8000894:	d90f      	bls.n	80008b6 <GPIO_IRQConfig+0xe6>
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b5f      	cmp	r3, #95	@ 0x5f
 800089a:	d80c      	bhi.n	80008b6 <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <GPIO_IRQConfig+0x104>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4a09      	ldr	r2, [pc, #36]	@ (80008d4 <GPIO_IRQConfig+0x104>)
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	e7ff      	b.n	80008b6 <GPIO_IRQConfig+0xe6>
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000e104 	.word	0xe000e104
 80008c8:	e000e108 	.word	0xe000e108
 80008cc:	e000e180 	.word	0xe000e180
 80008d0:	e000e184 	.word	0xe000e184
 80008d4:	e000e188 	.word	0xe000e188

080008d8 <GPIO_IRQPriorityConfig>:
 *
 * @return            - none
 */
// <-- FIX: Swapped IRQPriority and IRQNumber to be more logical
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]
    // <-- FIX: Logic was incorrect. We find the register and section
    //          using the IRQNumber, not the IRQPriority.
	// 1. Find the IPR register (IPR0, IPR1, etc.)
	uint8_t IPR_reg_idx = IRQNumber / 4;
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	73fb      	strb	r3, [r7, #15]
    // 2. Find the 8-bit section within that register
	uint8_t IPR_section_idx = IRQNumber % 4;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	73bb      	strb	r3, [r7, #14]

    // <-- FIX: Priority bits are in the *upper* 4 bits of the 8-bit field.
    //          We need to shift the priority value left.
	uint8_t shift_amount = ( 8 * IPR_section_idx ) + ( 8 - NO_OF_PR_BITS_IMPLEMENTED );
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	3304      	adds	r3, #4
 80008fe:	737b      	strb	r3, [r7, #13]

    // <-- FIX: Pointer arithmetic syntax was wrong (IPR_reg*).
    //          Also, we must clear the old priority first.
    // (NVIC_PR_BASEADDR) points to the start of IPR0.
    // (NVIC_PR_BASEADDR + IPR_reg_idx) moves the pointer to the correct IPR register.
    volatile uint32_t* priority_reg = (NVIC_PR_BASEADDR + IPR_reg_idx);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000908:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800090c:	60bb      	str	r3, [r7, #8]

    // Clear the 8-bit priority field first
    *priority_reg &= ~( 0xFF << shift_amount );
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	7b7a      	ldrb	r2, [r7, #13]
 8000914:	21ff      	movs	r1, #255	@ 0xff
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	401a      	ands	r2, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	601a      	str	r2, [r3, #0]

    // Set the new priority
    // We shift the 4-bit priority value to align it to the left
    // of the 8-bit field.
	*priority_reg |= ( (uint32_t)IRQPriority << shift_amount );
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	79b9      	ldrb	r1, [r7, #6]
 8000928:	7b7b      	ldrb	r3, [r7, #13]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	431a      	orrs	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
	...

08000940 <GPIO_IRQHandling>:
 *
 * @return            - none
 */
// <-- FIX: Changed signature to use 'PinNumber'
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    // <-- FIX: Check the pending register (PR) for the correct pin
	if(EXTI->PR & (1 << PinNumber))
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <GPIO_IRQHandling+0x30>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d004      	beq.n	8000966 <GPIO_IRQHandling+0x26>
	{
        // <-- FIX: Clear the pending bit by *writing 1* to it.
        //          Using '|= 1' will not work and is a common bug.
        //          You must write the bit to 1 to clear it.
		EXTI->PR = (1 << PinNumber);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2201      	movs	r2, #1
 8000960:	409a      	lsls	r2, r3
 8000962:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <GPIO_IRQHandling+0x30>)
 8000964:	615a      	str	r2, [r3, #20]
	}
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40013c00 	.word	0x40013c00

08000974 <main>:
    // A simple loop to create a software delay
    for (uint32_t i = 0; i < 500000; i++);
}

int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed, Gpiobtn;

    // --- Configure settings for the LED pin (PA5) ---
    GpioLed.pGPIOx = GPIOA;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <main+0x6c>)
 800097c:	60fb      	str	r3, [r7, #12]
    GpioLed.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NO_5;
 800097e:	2305      	movs	r3, #5
 8000980:	743b      	strb	r3, [r7, #16]
    GpioLed.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODE_OUT;
 8000982:	2301      	movs	r3, #1
 8000984:	747b      	strb	r3, [r7, #17]
    GpioLed.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000986:	2302      	movs	r3, #2
 8000988:	74bb      	strb	r3, [r7, #18]
    // (FIX 4: Recommended) Use Push-Pull for LEDs, it's more direct
    GpioLed.GPIO_Pin_Config.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 800098a:	2300      	movs	r3, #0
 800098c:	753b      	strb	r3, [r7, #20]
    GpioLed.GPIO_Pin_Config.GPIO_PinPupdControl = GPIO_NO_PUPD;
 800098e:	2300      	movs	r3, #0
 8000990:	74fb      	strb	r3, [r7, #19]

    // Enable the peripheral clock for GPIOA
    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000992:	2101      	movs	r1, #1
 8000994:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <main+0x6c>)
 8000996:	f7ff fc8b 	bl	80002b0 <GPIO_PeriClockControl>
    // Initialize the LED pin
    GPIO_Init(&GpioLed);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fd56 	bl	8000450 <GPIO_Init>


    // --- Configure settings for the Button pin (PC3) ---
    Gpiobtn.pGPIOx = GPIOC;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <main+0x70>)
 80009a6:	603b      	str	r3, [r7, #0]
    // (FIX 1: Mismatch Error) Use Pin 3 to match the interrupt
    Gpiobtn.GPIO_Pin_Config.GPIO_PinNumber = GPIO_PIN_NO_3;
 80009a8:	2303      	movs	r3, #3
 80009aa:	713b      	strb	r3, [r7, #4]
    // (FIX 2: Logic Error) Use Rising Trigger (RT) because you pull-down (LOW)
    // and connect to VCC (HIGH). This is a 0 -> 1 rising edge.
    Gpiobtn.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODE_IT_RT;
 80009ac:	2305      	movs	r3, #5
 80009ae:	717b      	strb	r3, [r7, #5]
    Gpiobtn.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009b0:	2302      	movs	r3, #2
 80009b2:	71bb      	strb	r3, [r7, #6]
    // This is correct for your hardware plan:
    Gpiobtn.GPIO_Pin_Config.GPIO_PinPupdControl = GPIO_PIN_PD;
 80009b4:	2302      	movs	r3, #2
 80009b6:	71fb      	strb	r3, [r7, #7]

    // Enable the peripheral clock for GPIOC
    GPIO_PeriClockControl(GPIOC, ENABLE);
 80009b8:	2101      	movs	r1, #1
 80009ba:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <main+0x70>)
 80009bc:	f7ff fc78 	bl	80002b0 <GPIO_PeriClockControl>
    // Initialize the Button pin
    GPIO_Init(&Gpiobtn);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fd44 	bl	8000450 <GPIO_Init>


    // --- Configure the Interrupt (NVIC) ---
    // (FIX 3: Compile Error) Use a real number (0-15) for priority
    GPIO_IRQPriorityConfig(IRQNO_EXTI3, 15); // 15 is lowest priority
 80009c8:	210f      	movs	r1, #15
 80009ca:	2009      	movs	r0, #9
 80009cc:	f7ff ff84 	bl	80008d8 <GPIO_IRQPriorityConfig>

    // This enables the interrupt line for EXTI3 (which is IRQ Number 9)
    GPIO_IRQConfig(IRQNO_EXTI3, ENABLE);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2009      	movs	r0, #9
 80009d4:	f7ff fefc 	bl	80007d0 <GPIO_IRQConfig>
    // The CPU will wait here. When the interrupt happens,
    // it will pause this loop, run the ISR, then come back.
    while(1)
    {
        // Wait for interrupt
    	printf(" inside while/n");
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <main+0x74>)
 80009da:	f000 f9cb 	bl	8000d74 <iprintf>
 80009de:	e7fb      	b.n	80009d8 <main+0x64>
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	08001a58 	.word	0x08001a58

080009ec <EXTI3_IRQHandler>:
 * @brief Interrupt Service Routine for EXTI Line 3
 * This function name is specific and must be exact.
 * It runs when PC3 (or PA3, PB3, etc.) triggers an interrupt.
 */
void EXTI3_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    // IMPORTANT: Clear the pending flag for Pin 3 *first*.
    // This tells the hardware you've handled the interrupt.
    GPIO_IRQHandling(GPIO_PIN_NO_3);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f7ff ffa5 	bl	8000940 <GPIO_IRQHandling>

    // Now, do your work
    GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 80009f6:	2105      	movs	r1, #5
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <EXTI3_IRQHandler+0x1c>)
 80009fa:	f7ff fed5 	bl	80007a8 <GPIO_ToggleOutputPin>
    printf(" inside int/n");
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <EXTI3_IRQHandler+0x20>)
 8000a00:	f000 f9b8 	bl	8000d74 <iprintf>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	08001a68 	.word	0x08001a68

08000a10 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <ITM_SendChar+0x44>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <ITM_SendChar+0x44>)
 8000a20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a24:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <ITM_SendChar+0x48>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <ITM_SendChar+0x48>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a32:	bf00      	nop
 8000a34:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f8      	beq.n	8000a34 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a42:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	6013      	str	r3, [r2, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	e000edfc 	.word	0xe000edfc
 8000a58:	e0000e00 	.word	0xe0000e00

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffad 	bl	8000a10 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
  }
  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af4:	605a      	str	r2, [r3, #4]
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <_isatty>:

int _isatty(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f000 f9ac 	bl	8000ebc <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20020000 	.word	0x20020000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000078 	.word	0x20000078
 8000b98:	200001c8 	.word	0x200001c8

08000b9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bca:	f000 f97d 	bl	8000ec8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000bce:	f7ff fed1 	bl	8000974 <main>

08000bd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   r0, =_estack
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be0:	08001abc 	.word	0x08001abc
  ldr r2, =_sbss
 8000be4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000be8:	200001c8 	.word	0x200001c8

08000bec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <std>:
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	b510      	push	{r4, lr}
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8000bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bfe:	6083      	str	r3, [r0, #8]
 8000c00:	8181      	strh	r1, [r0, #12]
 8000c02:	6643      	str	r3, [r0, #100]	@ 0x64
 8000c04:	81c2      	strh	r2, [r0, #14]
 8000c06:	6183      	str	r3, [r0, #24]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	305c      	adds	r0, #92	@ 0x5c
 8000c0e:	f000 f906 	bl	8000e1e <memset>
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <std+0x58>)
 8000c14:	6263      	str	r3, [r4, #36]	@ 0x24
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <std+0x5c>)
 8000c18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <std+0x60>)
 8000c1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <std+0x64>)
 8000c20:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <std+0x68>)
 8000c24:	6224      	str	r4, [r4, #32]
 8000c26:	429c      	cmp	r4, r3
 8000c28:	d006      	beq.n	8000c38 <std+0x48>
 8000c2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c2e:	4294      	cmp	r4, r2
 8000c30:	d002      	beq.n	8000c38 <std+0x48>
 8000c32:	33d0      	adds	r3, #208	@ 0xd0
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d105      	bne.n	8000c44 <std+0x54>
 8000c38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c40:	f000 b966 	b.w	8000f10 <__retarget_lock_init_recursive>
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	bf00      	nop
 8000c48:	08000d99 	.word	0x08000d99
 8000c4c:	08000dbb 	.word	0x08000dbb
 8000c50:	08000df3 	.word	0x08000df3
 8000c54:	08000e17 	.word	0x08000e17
 8000c58:	2000007c 	.word	0x2000007c

08000c5c <stdio_exit_handler>:
 8000c5c:	4a02      	ldr	r2, [pc, #8]	@ (8000c68 <stdio_exit_handler+0xc>)
 8000c5e:	4903      	ldr	r1, [pc, #12]	@ (8000c6c <stdio_exit_handler+0x10>)
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <stdio_exit_handler+0x14>)
 8000c62:	f000 b869 	b.w	8000d38 <_fwalk_sglue>
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	080017a1 	.word	0x080017a1
 8000c70:	20000010 	.word	0x20000010

08000c74 <cleanup_stdio>:
 8000c74:	6841      	ldr	r1, [r0, #4]
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <cleanup_stdio+0x34>)
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	b510      	push	{r4, lr}
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	d001      	beq.n	8000c84 <cleanup_stdio+0x10>
 8000c80:	f000 fd8e 	bl	80017a0 <_fflush_r>
 8000c84:	68a1      	ldr	r1, [r4, #8]
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <cleanup_stdio+0x38>)
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d002      	beq.n	8000c92 <cleanup_stdio+0x1e>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f000 fd87 	bl	80017a0 <_fflush_r>
 8000c92:	68e1      	ldr	r1, [r4, #12]
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <cleanup_stdio+0x3c>)
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d004      	beq.n	8000ca4 <cleanup_stdio+0x30>
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ca0:	f000 bd7e 	b.w	80017a0 <_fflush_r>
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000007c 	.word	0x2000007c
 8000cac:	200000e4 	.word	0x200000e4
 8000cb0:	2000014c 	.word	0x2000014c

08000cb4 <global_stdio_init.part.0>:
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <global_stdio_init.part.0+0x30>)
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	@ (8000ce8 <global_stdio_init.part.0+0x34>)
 8000cba:	4a0c      	ldr	r2, [pc, #48]	@ (8000cec <global_stdio_init.part.0+0x38>)
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	f7ff ff94 	bl	8000bf0 <std>
 8000cc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2109      	movs	r1, #9
 8000cd0:	f7ff ff8e 	bl	8000bf0 <std>
 8000cd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000cd8:	2202      	movs	r2, #2
 8000cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cde:	2112      	movs	r1, #18
 8000ce0:	f7ff bf86 	b.w	8000bf0 <std>
 8000ce4:	200001b4 	.word	0x200001b4
 8000ce8:	2000007c 	.word	0x2000007c
 8000cec:	08000c5d 	.word	0x08000c5d

08000cf0 <__sfp_lock_acquire>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	@ (8000cf8 <__sfp_lock_acquire+0x8>)
 8000cf2:	f000 b90e 	b.w	8000f12 <__retarget_lock_acquire_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200001bd 	.word	0x200001bd

08000cfc <__sfp_lock_release>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	@ (8000d04 <__sfp_lock_release+0x8>)
 8000cfe:	f000 b909 	b.w	8000f14 <__retarget_lock_release_recursive>
 8000d02:	bf00      	nop
 8000d04:	200001bd 	.word	0x200001bd

08000d08 <__sinit>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fff0 	bl	8000cf0 <__sfp_lock_acquire>
 8000d10:	6a23      	ldr	r3, [r4, #32]
 8000d12:	b11b      	cbz	r3, 8000d1c <__sinit+0x14>
 8000d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d18:	f7ff bff0 	b.w	8000cfc <__sfp_lock_release>
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <__sinit+0x28>)
 8000d1e:	6223      	str	r3, [r4, #32]
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__sinit+0x2c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f5      	bne.n	8000d14 <__sinit+0xc>
 8000d28:	f7ff ffc4 	bl	8000cb4 <global_stdio_init.part.0>
 8000d2c:	e7f2      	b.n	8000d14 <__sinit+0xc>
 8000d2e:	bf00      	nop
 8000d30:	08000c75 	.word	0x08000c75
 8000d34:	200001b4 	.word	0x200001b4

08000d38 <_fwalk_sglue>:
 8000d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d3c:	4607      	mov	r7, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	4614      	mov	r4, r2
 8000d42:	2600      	movs	r6, #0
 8000d44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d48:	f1b9 0901 	subs.w	r9, r9, #1
 8000d4c:	d505      	bpl.n	8000d5a <_fwalk_sglue+0x22>
 8000d4e:	6824      	ldr	r4, [r4, #0]
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d1f7      	bne.n	8000d44 <_fwalk_sglue+0xc>
 8000d54:	4630      	mov	r0, r6
 8000d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d5a:	89ab      	ldrh	r3, [r5, #12]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d907      	bls.n	8000d70 <_fwalk_sglue+0x38>
 8000d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d64:	3301      	adds	r3, #1
 8000d66:	d003      	beq.n	8000d70 <_fwalk_sglue+0x38>
 8000d68:	4629      	mov	r1, r5
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	47c0      	blx	r8
 8000d6e:	4306      	orrs	r6, r0
 8000d70:	3568      	adds	r5, #104	@ 0x68
 8000d72:	e7e9      	b.n	8000d48 <_fwalk_sglue+0x10>

08000d74 <iprintf>:
 8000d74:	b40f      	push	{r0, r1, r2, r3}
 8000d76:	b507      	push	{r0, r1, r2, lr}
 8000d78:	4906      	ldr	r1, [pc, #24]	@ (8000d94 <iprintf+0x20>)
 8000d7a:	ab04      	add	r3, sp, #16
 8000d7c:	6808      	ldr	r0, [r1, #0]
 8000d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d82:	6881      	ldr	r1, [r0, #8]
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	f000 f9e7 	bl	8001158 <_vfiprintf_r>
 8000d8a:	b003      	add	sp, #12
 8000d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d90:	b004      	add	sp, #16
 8000d92:	4770      	bx	lr
 8000d94:	2000000c 	.word	0x2000000c

08000d98 <__sread>:
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000da0:	f000 f868 	bl	8000e74 <_read_r>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	bfab      	itete	ge
 8000da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000daa:	89a3      	ldrhlt	r3, [r4, #12]
 8000dac:	181b      	addge	r3, r3, r0
 8000dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000db2:	bfac      	ite	ge
 8000db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000db6:	81a3      	strhlt	r3, [r4, #12]
 8000db8:	bd10      	pop	{r4, pc}

08000dba <__swrite>:
 8000dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dbe:	461f      	mov	r7, r3
 8000dc0:	898b      	ldrh	r3, [r1, #12]
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	4616      	mov	r6, r2
 8000dca:	d505      	bpl.n	8000dd8 <__swrite+0x1e>
 8000dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f000 f83c 	bl	8000e50 <_lseek_r>
 8000dd8:	89a3      	ldrh	r3, [r4, #12]
 8000dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000de2:	81a3      	strh	r3, [r4, #12]
 8000de4:	4632      	mov	r2, r6
 8000de6:	463b      	mov	r3, r7
 8000de8:	4628      	mov	r0, r5
 8000dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000dee:	f000 b853 	b.w	8000e98 <_write_r>

08000df2 <__sseek>:
 8000df2:	b510      	push	{r4, lr}
 8000df4:	460c      	mov	r4, r1
 8000df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dfa:	f000 f829 	bl	8000e50 <_lseek_r>
 8000dfe:	1c43      	adds	r3, r0, #1
 8000e00:	89a3      	ldrh	r3, [r4, #12]
 8000e02:	bf15      	itete	ne
 8000e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e0e:	81a3      	strheq	r3, [r4, #12]
 8000e10:	bf18      	it	ne
 8000e12:	81a3      	strhne	r3, [r4, #12]
 8000e14:	bd10      	pop	{r4, pc}

08000e16 <__sclose>:
 8000e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e1a:	f000 b809 	b.w	8000e30 <_close_r>

08000e1e <memset>:
 8000e1e:	4402      	add	r2, r0
 8000e20:	4603      	mov	r3, r0
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d100      	bne.n	8000e28 <memset+0xa>
 8000e26:	4770      	bx	lr
 8000e28:	f803 1b01 	strb.w	r1, [r3], #1
 8000e2c:	e7f9      	b.n	8000e22 <memset+0x4>
	...

08000e30 <_close_r>:
 8000e30:	b538      	push	{r3, r4, r5, lr}
 8000e32:	4d06      	ldr	r5, [pc, #24]	@ (8000e4c <_close_r+0x1c>)
 8000e34:	2300      	movs	r3, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	602b      	str	r3, [r5, #0]
 8000e3c:	f7ff fe47 	bl	8000ace <_close>
 8000e40:	1c43      	adds	r3, r0, #1
 8000e42:	d102      	bne.n	8000e4a <_close_r+0x1a>
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	b103      	cbz	r3, 8000e4a <_close_r+0x1a>
 8000e48:	6023      	str	r3, [r4, #0]
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
 8000e4c:	200001b8 	.word	0x200001b8

08000e50 <_lseek_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4d07      	ldr	r5, [pc, #28]	@ (8000e70 <_lseek_r+0x20>)
 8000e54:	4604      	mov	r4, r0
 8000e56:	4608      	mov	r0, r1
 8000e58:	4611      	mov	r1, r2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	602a      	str	r2, [r5, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f7ff fe59 	bl	8000b16 <_lseek>
 8000e64:	1c43      	adds	r3, r0, #1
 8000e66:	d102      	bne.n	8000e6e <_lseek_r+0x1e>
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	b103      	cbz	r3, 8000e6e <_lseek_r+0x1e>
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
 8000e70:	200001b8 	.word	0x200001b8

08000e74 <_read_r>:
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	4d07      	ldr	r5, [pc, #28]	@ (8000e94 <_read_r+0x20>)
 8000e78:	4604      	mov	r4, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	602a      	str	r2, [r5, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	f7ff fdea 	bl	8000a5c <_read>
 8000e88:	1c43      	adds	r3, r0, #1
 8000e8a:	d102      	bne.n	8000e92 <_read_r+0x1e>
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	b103      	cbz	r3, 8000e92 <_read_r+0x1e>
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
 8000e94:	200001b8 	.word	0x200001b8

08000e98 <_write_r>:
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4d07      	ldr	r5, [pc, #28]	@ (8000eb8 <_write_r+0x20>)
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	602a      	str	r2, [r5, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f7ff fdf5 	bl	8000a96 <_write>
 8000eac:	1c43      	adds	r3, r0, #1
 8000eae:	d102      	bne.n	8000eb6 <_write_r+0x1e>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	b103      	cbz	r3, 8000eb6 <_write_r+0x1e>
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
 8000eb8:	200001b8 	.word	0x200001b8

08000ebc <__errno>:
 8000ebc:	4b01      	ldr	r3, [pc, #4]	@ (8000ec4 <__errno+0x8>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000000c 	.word	0x2000000c

08000ec8 <__libc_init_array>:
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	4d0d      	ldr	r5, [pc, #52]	@ (8000f00 <__libc_init_array+0x38>)
 8000ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8000f04 <__libc_init_array+0x3c>)
 8000ece:	1b64      	subs	r4, r4, r5
 8000ed0:	10a4      	asrs	r4, r4, #2
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	42a6      	cmp	r6, r4
 8000ed6:	d109      	bne.n	8000eec <__libc_init_array+0x24>
 8000ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8000f08 <__libc_init_array+0x40>)
 8000eda:	4c0c      	ldr	r4, [pc, #48]	@ (8000f0c <__libc_init_array+0x44>)
 8000edc:	f000 fdb0 	bl	8001a40 <_init>
 8000ee0:	1b64      	subs	r4, r4, r5
 8000ee2:	10a4      	asrs	r4, r4, #2
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	42a6      	cmp	r6, r4
 8000ee8:	d105      	bne.n	8000ef6 <__libc_init_array+0x2e>
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef0:	4798      	blx	r3
 8000ef2:	3601      	adds	r6, #1
 8000ef4:	e7ee      	b.n	8000ed4 <__libc_init_array+0xc>
 8000ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000efa:	4798      	blx	r3
 8000efc:	3601      	adds	r6, #1
 8000efe:	e7f2      	b.n	8000ee6 <__libc_init_array+0x1e>
 8000f00:	08001ab4 	.word	0x08001ab4
 8000f04:	08001ab4 	.word	0x08001ab4
 8000f08:	08001ab4 	.word	0x08001ab4
 8000f0c:	08001ab8 	.word	0x08001ab8

08000f10 <__retarget_lock_init_recursive>:
 8000f10:	4770      	bx	lr

08000f12 <__retarget_lock_acquire_recursive>:
 8000f12:	4770      	bx	lr

08000f14 <__retarget_lock_release_recursive>:
 8000f14:	4770      	bx	lr
	...

08000f18 <_free_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4605      	mov	r5, r0
 8000f1c:	2900      	cmp	r1, #0
 8000f1e:	d041      	beq.n	8000fa4 <_free_r+0x8c>
 8000f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f24:	1f0c      	subs	r4, r1, #4
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bfb8      	it	lt
 8000f2a:	18e4      	addlt	r4, r4, r3
 8000f2c:	f000 f8e0 	bl	80010f0 <__malloc_lock>
 8000f30:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <_free_r+0x90>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	b933      	cbnz	r3, 8000f44 <_free_r+0x2c>
 8000f36:	6063      	str	r3, [r4, #4]
 8000f38:	6014      	str	r4, [r2, #0]
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f40:	f000 b8dc 	b.w	80010fc <__malloc_unlock>
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <_free_r+0x42>
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	1821      	adds	r1, r4, r0
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	bf01      	itttt	eq
 8000f50:	6819      	ldreq	r1, [r3, #0]
 8000f52:	685b      	ldreq	r3, [r3, #4]
 8000f54:	1809      	addeq	r1, r1, r0
 8000f56:	6021      	streq	r1, [r4, #0]
 8000f58:	e7ed      	b.n	8000f36 <_free_r+0x1e>
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b10b      	cbz	r3, 8000f64 <_free_r+0x4c>
 8000f60:	42a3      	cmp	r3, r4
 8000f62:	d9fa      	bls.n	8000f5a <_free_r+0x42>
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	1850      	adds	r0, r2, r1
 8000f68:	42a0      	cmp	r0, r4
 8000f6a:	d10b      	bne.n	8000f84 <_free_r+0x6c>
 8000f6c:	6820      	ldr	r0, [r4, #0]
 8000f6e:	4401      	add	r1, r0
 8000f70:	1850      	adds	r0, r2, r1
 8000f72:	4283      	cmp	r3, r0
 8000f74:	6011      	str	r1, [r2, #0]
 8000f76:	d1e0      	bne.n	8000f3a <_free_r+0x22>
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	6053      	str	r3, [r2, #4]
 8000f7e:	4408      	add	r0, r1
 8000f80:	6010      	str	r0, [r2, #0]
 8000f82:	e7da      	b.n	8000f3a <_free_r+0x22>
 8000f84:	d902      	bls.n	8000f8c <_free_r+0x74>
 8000f86:	230c      	movs	r3, #12
 8000f88:	602b      	str	r3, [r5, #0]
 8000f8a:	e7d6      	b.n	8000f3a <_free_r+0x22>
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	1821      	adds	r1, r4, r0
 8000f90:	428b      	cmp	r3, r1
 8000f92:	bf04      	itt	eq
 8000f94:	6819      	ldreq	r1, [r3, #0]
 8000f96:	685b      	ldreq	r3, [r3, #4]
 8000f98:	6063      	str	r3, [r4, #4]
 8000f9a:	bf04      	itt	eq
 8000f9c:	1809      	addeq	r1, r1, r0
 8000f9e:	6021      	streq	r1, [r4, #0]
 8000fa0:	6054      	str	r4, [r2, #4]
 8000fa2:	e7ca      	b.n	8000f3a <_free_r+0x22>
 8000fa4:	bd38      	pop	{r3, r4, r5, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001c4 	.word	0x200001c4

08000fac <sbrk_aligned>:
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	4e0f      	ldr	r6, [pc, #60]	@ (8000fec <sbrk_aligned+0x40>)
 8000fb0:	460c      	mov	r4, r1
 8000fb2:	6831      	ldr	r1, [r6, #0]
 8000fb4:	4605      	mov	r5, r0
 8000fb6:	b911      	cbnz	r1, 8000fbe <sbrk_aligned+0x12>
 8000fb8:	f000 fcae 	bl	8001918 <_sbrk_r>
 8000fbc:	6030      	str	r0, [r6, #0]
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f000 fca9 	bl	8001918 <_sbrk_r>
 8000fc6:	1c43      	adds	r3, r0, #1
 8000fc8:	d103      	bne.n	8000fd2 <sbrk_aligned+0x26>
 8000fca:	f04f 34ff 	mov.w	r4, #4294967295
 8000fce:	4620      	mov	r0, r4
 8000fd0:	bd70      	pop	{r4, r5, r6, pc}
 8000fd2:	1cc4      	adds	r4, r0, #3
 8000fd4:	f024 0403 	bic.w	r4, r4, #3
 8000fd8:	42a0      	cmp	r0, r4
 8000fda:	d0f8      	beq.n	8000fce <sbrk_aligned+0x22>
 8000fdc:	1a21      	subs	r1, r4, r0
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f000 fc9a 	bl	8001918 <_sbrk_r>
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d1f2      	bne.n	8000fce <sbrk_aligned+0x22>
 8000fe8:	e7ef      	b.n	8000fca <sbrk_aligned+0x1e>
 8000fea:	bf00      	nop
 8000fec:	200001c0 	.word	0x200001c0

08000ff0 <_malloc_r>:
 8000ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ff4:	1ccd      	adds	r5, r1, #3
 8000ff6:	f025 0503 	bic.w	r5, r5, #3
 8000ffa:	3508      	adds	r5, #8
 8000ffc:	2d0c      	cmp	r5, #12
 8000ffe:	bf38      	it	cc
 8001000:	250c      	movcc	r5, #12
 8001002:	2d00      	cmp	r5, #0
 8001004:	4606      	mov	r6, r0
 8001006:	db01      	blt.n	800100c <_malloc_r+0x1c>
 8001008:	42a9      	cmp	r1, r5
 800100a:	d904      	bls.n	8001016 <_malloc_r+0x26>
 800100c:	230c      	movs	r3, #12
 800100e:	6033      	str	r3, [r6, #0]
 8001010:	2000      	movs	r0, #0
 8001012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80010ec <_malloc_r+0xfc>
 800101a:	f000 f869 	bl	80010f0 <__malloc_lock>
 800101e:	f8d8 3000 	ldr.w	r3, [r8]
 8001022:	461c      	mov	r4, r3
 8001024:	bb44      	cbnz	r4, 8001078 <_malloc_r+0x88>
 8001026:	4629      	mov	r1, r5
 8001028:	4630      	mov	r0, r6
 800102a:	f7ff ffbf 	bl	8000fac <sbrk_aligned>
 800102e:	1c43      	adds	r3, r0, #1
 8001030:	4604      	mov	r4, r0
 8001032:	d158      	bne.n	80010e6 <_malloc_r+0xf6>
 8001034:	f8d8 4000 	ldr.w	r4, [r8]
 8001038:	4627      	mov	r7, r4
 800103a:	2f00      	cmp	r7, #0
 800103c:	d143      	bne.n	80010c6 <_malloc_r+0xd6>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d04b      	beq.n	80010da <_malloc_r+0xea>
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	4639      	mov	r1, r7
 8001046:	4630      	mov	r0, r6
 8001048:	eb04 0903 	add.w	r9, r4, r3
 800104c:	f000 fc64 	bl	8001918 <_sbrk_r>
 8001050:	4581      	cmp	r9, r0
 8001052:	d142      	bne.n	80010da <_malloc_r+0xea>
 8001054:	6821      	ldr	r1, [r4, #0]
 8001056:	1a6d      	subs	r5, r5, r1
 8001058:	4629      	mov	r1, r5
 800105a:	4630      	mov	r0, r6
 800105c:	f7ff ffa6 	bl	8000fac <sbrk_aligned>
 8001060:	3001      	adds	r0, #1
 8001062:	d03a      	beq.n	80010da <_malloc_r+0xea>
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	442b      	add	r3, r5
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	f8d8 3000 	ldr.w	r3, [r8]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	bb62      	cbnz	r2, 80010cc <_malloc_r+0xdc>
 8001072:	f8c8 7000 	str.w	r7, [r8]
 8001076:	e00f      	b.n	8001098 <_malloc_r+0xa8>
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	1b52      	subs	r2, r2, r5
 800107c:	d420      	bmi.n	80010c0 <_malloc_r+0xd0>
 800107e:	2a0b      	cmp	r2, #11
 8001080:	d917      	bls.n	80010b2 <_malloc_r+0xc2>
 8001082:	1961      	adds	r1, r4, r5
 8001084:	42a3      	cmp	r3, r4
 8001086:	6025      	str	r5, [r4, #0]
 8001088:	bf18      	it	ne
 800108a:	6059      	strne	r1, [r3, #4]
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	bf08      	it	eq
 8001090:	f8c8 1000 	streq.w	r1, [r8]
 8001094:	5162      	str	r2, [r4, r5]
 8001096:	604b      	str	r3, [r1, #4]
 8001098:	4630      	mov	r0, r6
 800109a:	f000 f82f 	bl	80010fc <__malloc_unlock>
 800109e:	f104 000b 	add.w	r0, r4, #11
 80010a2:	1d23      	adds	r3, r4, #4
 80010a4:	f020 0007 	bic.w	r0, r0, #7
 80010a8:	1ac2      	subs	r2, r0, r3
 80010aa:	bf1c      	itt	ne
 80010ac:	1a1b      	subne	r3, r3, r0
 80010ae:	50a3      	strne	r3, [r4, r2]
 80010b0:	e7af      	b.n	8001012 <_malloc_r+0x22>
 80010b2:	6862      	ldr	r2, [r4, #4]
 80010b4:	42a3      	cmp	r3, r4
 80010b6:	bf0c      	ite	eq
 80010b8:	f8c8 2000 	streq.w	r2, [r8]
 80010bc:	605a      	strne	r2, [r3, #4]
 80010be:	e7eb      	b.n	8001098 <_malloc_r+0xa8>
 80010c0:	4623      	mov	r3, r4
 80010c2:	6864      	ldr	r4, [r4, #4]
 80010c4:	e7ae      	b.n	8001024 <_malloc_r+0x34>
 80010c6:	463c      	mov	r4, r7
 80010c8:	687f      	ldr	r7, [r7, #4]
 80010ca:	e7b6      	b.n	800103a <_malloc_r+0x4a>
 80010cc:	461a      	mov	r2, r3
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	42a3      	cmp	r3, r4
 80010d2:	d1fb      	bne.n	80010cc <_malloc_r+0xdc>
 80010d4:	2300      	movs	r3, #0
 80010d6:	6053      	str	r3, [r2, #4]
 80010d8:	e7de      	b.n	8001098 <_malloc_r+0xa8>
 80010da:	230c      	movs	r3, #12
 80010dc:	6033      	str	r3, [r6, #0]
 80010de:	4630      	mov	r0, r6
 80010e0:	f000 f80c 	bl	80010fc <__malloc_unlock>
 80010e4:	e794      	b.n	8001010 <_malloc_r+0x20>
 80010e6:	6005      	str	r5, [r0, #0]
 80010e8:	e7d6      	b.n	8001098 <_malloc_r+0xa8>
 80010ea:	bf00      	nop
 80010ec:	200001c4 	.word	0x200001c4

080010f0 <__malloc_lock>:
 80010f0:	4801      	ldr	r0, [pc, #4]	@ (80010f8 <__malloc_lock+0x8>)
 80010f2:	f7ff bf0e 	b.w	8000f12 <__retarget_lock_acquire_recursive>
 80010f6:	bf00      	nop
 80010f8:	200001bc 	.word	0x200001bc

080010fc <__malloc_unlock>:
 80010fc:	4801      	ldr	r0, [pc, #4]	@ (8001104 <__malloc_unlock+0x8>)
 80010fe:	f7ff bf09 	b.w	8000f14 <__retarget_lock_release_recursive>
 8001102:	bf00      	nop
 8001104:	200001bc 	.word	0x200001bc

08001108 <__sfputc_r>:
 8001108:	6893      	ldr	r3, [r2, #8]
 800110a:	3b01      	subs	r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	b410      	push	{r4}
 8001110:	6093      	str	r3, [r2, #8]
 8001112:	da07      	bge.n	8001124 <__sfputc_r+0x1c>
 8001114:	6994      	ldr	r4, [r2, #24]
 8001116:	42a3      	cmp	r3, r4
 8001118:	db01      	blt.n	800111e <__sfputc_r+0x16>
 800111a:	290a      	cmp	r1, #10
 800111c:	d102      	bne.n	8001124 <__sfputc_r+0x1c>
 800111e:	bc10      	pop	{r4}
 8001120:	f000 bb66 	b.w	80017f0 <__swbuf_r>
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	1c58      	adds	r0, r3, #1
 8001128:	6010      	str	r0, [r2, #0]
 800112a:	7019      	strb	r1, [r3, #0]
 800112c:	4608      	mov	r0, r1
 800112e:	bc10      	pop	{r4}
 8001130:	4770      	bx	lr

08001132 <__sfputs_r>:
 8001132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001134:	4606      	mov	r6, r0
 8001136:	460f      	mov	r7, r1
 8001138:	4614      	mov	r4, r2
 800113a:	18d5      	adds	r5, r2, r3
 800113c:	42ac      	cmp	r4, r5
 800113e:	d101      	bne.n	8001144 <__sfputs_r+0x12>
 8001140:	2000      	movs	r0, #0
 8001142:	e007      	b.n	8001154 <__sfputs_r+0x22>
 8001144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001148:	463a      	mov	r2, r7
 800114a:	4630      	mov	r0, r6
 800114c:	f7ff ffdc 	bl	8001108 <__sfputc_r>
 8001150:	1c43      	adds	r3, r0, #1
 8001152:	d1f3      	bne.n	800113c <__sfputs_r+0xa>
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001158 <_vfiprintf_r>:
 8001158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800115c:	460d      	mov	r5, r1
 800115e:	b09d      	sub	sp, #116	@ 0x74
 8001160:	4614      	mov	r4, r2
 8001162:	4698      	mov	r8, r3
 8001164:	4606      	mov	r6, r0
 8001166:	b118      	cbz	r0, 8001170 <_vfiprintf_r+0x18>
 8001168:	6a03      	ldr	r3, [r0, #32]
 800116a:	b90b      	cbnz	r3, 8001170 <_vfiprintf_r+0x18>
 800116c:	f7ff fdcc 	bl	8000d08 <__sinit>
 8001170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001172:	07d9      	lsls	r1, r3, #31
 8001174:	d405      	bmi.n	8001182 <_vfiprintf_r+0x2a>
 8001176:	89ab      	ldrh	r3, [r5, #12]
 8001178:	059a      	lsls	r2, r3, #22
 800117a:	d402      	bmi.n	8001182 <_vfiprintf_r+0x2a>
 800117c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800117e:	f7ff fec8 	bl	8000f12 <__retarget_lock_acquire_recursive>
 8001182:	89ab      	ldrh	r3, [r5, #12]
 8001184:	071b      	lsls	r3, r3, #28
 8001186:	d501      	bpl.n	800118c <_vfiprintf_r+0x34>
 8001188:	692b      	ldr	r3, [r5, #16]
 800118a:	b99b      	cbnz	r3, 80011b4 <_vfiprintf_r+0x5c>
 800118c:	4629      	mov	r1, r5
 800118e:	4630      	mov	r0, r6
 8001190:	f000 fb6c 	bl	800186c <__swsetup_r>
 8001194:	b170      	cbz	r0, 80011b4 <_vfiprintf_r+0x5c>
 8001196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001198:	07dc      	lsls	r4, r3, #31
 800119a:	d504      	bpl.n	80011a6 <_vfiprintf_r+0x4e>
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	b01d      	add	sp, #116	@ 0x74
 80011a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011a6:	89ab      	ldrh	r3, [r5, #12]
 80011a8:	0598      	lsls	r0, r3, #22
 80011aa:	d4f7      	bmi.n	800119c <_vfiprintf_r+0x44>
 80011ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011ae:	f7ff feb1 	bl	8000f14 <__retarget_lock_release_recursive>
 80011b2:	e7f3      	b.n	800119c <_vfiprintf_r+0x44>
 80011b4:	2300      	movs	r3, #0
 80011b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80011b8:	2320      	movs	r3, #32
 80011ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80011be:	f8cd 800c 	str.w	r8, [sp, #12]
 80011c2:	2330      	movs	r3, #48	@ 0x30
 80011c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001374 <_vfiprintf_r+0x21c>
 80011c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80011cc:	f04f 0901 	mov.w	r9, #1
 80011d0:	4623      	mov	r3, r4
 80011d2:	469a      	mov	sl, r3
 80011d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011d8:	b10a      	cbz	r2, 80011de <_vfiprintf_r+0x86>
 80011da:	2a25      	cmp	r2, #37	@ 0x25
 80011dc:	d1f9      	bne.n	80011d2 <_vfiprintf_r+0x7a>
 80011de:	ebba 0b04 	subs.w	fp, sl, r4
 80011e2:	d00b      	beq.n	80011fc <_vfiprintf_r+0xa4>
 80011e4:	465b      	mov	r3, fp
 80011e6:	4622      	mov	r2, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	4630      	mov	r0, r6
 80011ec:	f7ff ffa1 	bl	8001132 <__sfputs_r>
 80011f0:	3001      	adds	r0, #1
 80011f2:	f000 80a7 	beq.w	8001344 <_vfiprintf_r+0x1ec>
 80011f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011f8:	445a      	add	r2, fp
 80011fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80011fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 809f 	beq.w	8001344 <_vfiprintf_r+0x1ec>
 8001206:	2300      	movs	r3, #0
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001210:	f10a 0a01 	add.w	sl, sl, #1
 8001214:	9304      	str	r3, [sp, #16]
 8001216:	9307      	str	r3, [sp, #28]
 8001218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800121c:	931a      	str	r3, [sp, #104]	@ 0x68
 800121e:	4654      	mov	r4, sl
 8001220:	2205      	movs	r2, #5
 8001222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001226:	4853      	ldr	r0, [pc, #332]	@ (8001374 <_vfiprintf_r+0x21c>)
 8001228:	f7fe fff2 	bl	8000210 <memchr>
 800122c:	9a04      	ldr	r2, [sp, #16]
 800122e:	b9d8      	cbnz	r0, 8001268 <_vfiprintf_r+0x110>
 8001230:	06d1      	lsls	r1, r2, #27
 8001232:	bf44      	itt	mi
 8001234:	2320      	movmi	r3, #32
 8001236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800123a:	0713      	lsls	r3, r2, #28
 800123c:	bf44      	itt	mi
 800123e:	232b      	movmi	r3, #43	@ 0x2b
 8001240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001244:	f89a 3000 	ldrb.w	r3, [sl]
 8001248:	2b2a      	cmp	r3, #42	@ 0x2a
 800124a:	d015      	beq.n	8001278 <_vfiprintf_r+0x120>
 800124c:	9a07      	ldr	r2, [sp, #28]
 800124e:	4654      	mov	r4, sl
 8001250:	2000      	movs	r0, #0
 8001252:	f04f 0c0a 	mov.w	ip, #10
 8001256:	4621      	mov	r1, r4
 8001258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800125c:	3b30      	subs	r3, #48	@ 0x30
 800125e:	2b09      	cmp	r3, #9
 8001260:	d94b      	bls.n	80012fa <_vfiprintf_r+0x1a2>
 8001262:	b1b0      	cbz	r0, 8001292 <_vfiprintf_r+0x13a>
 8001264:	9207      	str	r2, [sp, #28]
 8001266:	e014      	b.n	8001292 <_vfiprintf_r+0x13a>
 8001268:	eba0 0308 	sub.w	r3, r0, r8
 800126c:	fa09 f303 	lsl.w	r3, r9, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	9304      	str	r3, [sp, #16]
 8001274:	46a2      	mov	sl, r4
 8001276:	e7d2      	b.n	800121e <_vfiprintf_r+0xc6>
 8001278:	9b03      	ldr	r3, [sp, #12]
 800127a:	1d19      	adds	r1, r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	9103      	str	r1, [sp, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	bfbb      	ittet	lt
 8001284:	425b      	neglt	r3, r3
 8001286:	f042 0202 	orrlt.w	r2, r2, #2
 800128a:	9307      	strge	r3, [sp, #28]
 800128c:	9307      	strlt	r3, [sp, #28]
 800128e:	bfb8      	it	lt
 8001290:	9204      	strlt	r2, [sp, #16]
 8001292:	7823      	ldrb	r3, [r4, #0]
 8001294:	2b2e      	cmp	r3, #46	@ 0x2e
 8001296:	d10a      	bne.n	80012ae <_vfiprintf_r+0x156>
 8001298:	7863      	ldrb	r3, [r4, #1]
 800129a:	2b2a      	cmp	r3, #42	@ 0x2a
 800129c:	d132      	bne.n	8001304 <_vfiprintf_r+0x1ac>
 800129e:	9b03      	ldr	r3, [sp, #12]
 80012a0:	1d1a      	adds	r2, r3, #4
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80012aa:	3402      	adds	r4, #2
 80012ac:	9305      	str	r3, [sp, #20]
 80012ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001378 <_vfiprintf_r+0x220>
 80012b2:	7821      	ldrb	r1, [r4, #0]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4650      	mov	r0, sl
 80012b8:	f7fe ffaa 	bl	8000210 <memchr>
 80012bc:	b138      	cbz	r0, 80012ce <_vfiprintf_r+0x176>
 80012be:	9b04      	ldr	r3, [sp, #16]
 80012c0:	eba0 000a 	sub.w	r0, r0, sl
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	4082      	lsls	r2, r0
 80012c8:	4313      	orrs	r3, r2
 80012ca:	3401      	adds	r4, #1
 80012cc:	9304      	str	r3, [sp, #16]
 80012ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012d2:	482a      	ldr	r0, [pc, #168]	@ (800137c <_vfiprintf_r+0x224>)
 80012d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012d8:	2206      	movs	r2, #6
 80012da:	f7fe ff99 	bl	8000210 <memchr>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d03f      	beq.n	8001362 <_vfiprintf_r+0x20a>
 80012e2:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <_vfiprintf_r+0x228>)
 80012e4:	bb1b      	cbnz	r3, 800132e <_vfiprintf_r+0x1d6>
 80012e6:	9b03      	ldr	r3, [sp, #12]
 80012e8:	3307      	adds	r3, #7
 80012ea:	f023 0307 	bic.w	r3, r3, #7
 80012ee:	3308      	adds	r3, #8
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012f4:	443b      	add	r3, r7
 80012f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80012f8:	e76a      	b.n	80011d0 <_vfiprintf_r+0x78>
 80012fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80012fe:	460c      	mov	r4, r1
 8001300:	2001      	movs	r0, #1
 8001302:	e7a8      	b.n	8001256 <_vfiprintf_r+0xfe>
 8001304:	2300      	movs	r3, #0
 8001306:	3401      	adds	r4, #1
 8001308:	9305      	str	r3, [sp, #20]
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 0c0a 	mov.w	ip, #10
 8001310:	4620      	mov	r0, r4
 8001312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001316:	3a30      	subs	r2, #48	@ 0x30
 8001318:	2a09      	cmp	r2, #9
 800131a:	d903      	bls.n	8001324 <_vfiprintf_r+0x1cc>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0c6      	beq.n	80012ae <_vfiprintf_r+0x156>
 8001320:	9105      	str	r1, [sp, #20]
 8001322:	e7c4      	b.n	80012ae <_vfiprintf_r+0x156>
 8001324:	fb0c 2101 	mla	r1, ip, r1, r2
 8001328:	4604      	mov	r4, r0
 800132a:	2301      	movs	r3, #1
 800132c:	e7f0      	b.n	8001310 <_vfiprintf_r+0x1b8>
 800132e:	ab03      	add	r3, sp, #12
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	462a      	mov	r2, r5
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_vfiprintf_r+0x22c>)
 8001336:	a904      	add	r1, sp, #16
 8001338:	4630      	mov	r0, r6
 800133a:	f3af 8000 	nop.w
 800133e:	4607      	mov	r7, r0
 8001340:	1c78      	adds	r0, r7, #1
 8001342:	d1d6      	bne.n	80012f2 <_vfiprintf_r+0x19a>
 8001344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001346:	07d9      	lsls	r1, r3, #31
 8001348:	d405      	bmi.n	8001356 <_vfiprintf_r+0x1fe>
 800134a:	89ab      	ldrh	r3, [r5, #12]
 800134c:	059a      	lsls	r2, r3, #22
 800134e:	d402      	bmi.n	8001356 <_vfiprintf_r+0x1fe>
 8001350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001352:	f7ff fddf 	bl	8000f14 <__retarget_lock_release_recursive>
 8001356:	89ab      	ldrh	r3, [r5, #12]
 8001358:	065b      	lsls	r3, r3, #25
 800135a:	f53f af1f 	bmi.w	800119c <_vfiprintf_r+0x44>
 800135e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001360:	e71e      	b.n	80011a0 <_vfiprintf_r+0x48>
 8001362:	ab03      	add	r3, sp, #12
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	462a      	mov	r2, r5
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <_vfiprintf_r+0x22c>)
 800136a:	a904      	add	r1, sp, #16
 800136c:	4630      	mov	r0, r6
 800136e:	f000 f879 	bl	8001464 <_printf_i>
 8001372:	e7e4      	b.n	800133e <_vfiprintf_r+0x1e6>
 8001374:	08001a76 	.word	0x08001a76
 8001378:	08001a7c 	.word	0x08001a7c
 800137c:	08001a80 	.word	0x08001a80
 8001380:	00000000 	.word	0x00000000
 8001384:	08001133 	.word	0x08001133

08001388 <_printf_common>:
 8001388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800138c:	4616      	mov	r6, r2
 800138e:	4698      	mov	r8, r3
 8001390:	688a      	ldr	r2, [r1, #8]
 8001392:	690b      	ldr	r3, [r1, #16]
 8001394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001398:	4293      	cmp	r3, r2
 800139a:	bfb8      	it	lt
 800139c:	4613      	movlt	r3, r2
 800139e:	6033      	str	r3, [r6, #0]
 80013a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80013a4:	4607      	mov	r7, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	b10a      	cbz	r2, 80013ae <_printf_common+0x26>
 80013aa:	3301      	adds	r3, #1
 80013ac:	6033      	str	r3, [r6, #0]
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	0699      	lsls	r1, r3, #26
 80013b2:	bf42      	ittt	mi
 80013b4:	6833      	ldrmi	r3, [r6, #0]
 80013b6:	3302      	addmi	r3, #2
 80013b8:	6033      	strmi	r3, [r6, #0]
 80013ba:	6825      	ldr	r5, [r4, #0]
 80013bc:	f015 0506 	ands.w	r5, r5, #6
 80013c0:	d106      	bne.n	80013d0 <_printf_common+0x48>
 80013c2:	f104 0a19 	add.w	sl, r4, #25
 80013c6:	68e3      	ldr	r3, [r4, #12]
 80013c8:	6832      	ldr	r2, [r6, #0]
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	42ab      	cmp	r3, r5
 80013ce:	dc26      	bgt.n	800141e <_printf_common+0x96>
 80013d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	3b00      	subs	r3, #0
 80013d8:	bf18      	it	ne
 80013da:	2301      	movne	r3, #1
 80013dc:	0692      	lsls	r2, r2, #26
 80013de:	d42b      	bmi.n	8001438 <_printf_common+0xb0>
 80013e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013e4:	4641      	mov	r1, r8
 80013e6:	4638      	mov	r0, r7
 80013e8:	47c8      	blx	r9
 80013ea:	3001      	adds	r0, #1
 80013ec:	d01e      	beq.n	800142c <_printf_common+0xa4>
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	6922      	ldr	r2, [r4, #16]
 80013f2:	f003 0306 	and.w	r3, r3, #6
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf02      	ittt	eq
 80013fa:	68e5      	ldreq	r5, [r4, #12]
 80013fc:	6833      	ldreq	r3, [r6, #0]
 80013fe:	1aed      	subeq	r5, r5, r3
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	bf0c      	ite	eq
 8001404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001408:	2500      	movne	r5, #0
 800140a:	4293      	cmp	r3, r2
 800140c:	bfc4      	itt	gt
 800140e:	1a9b      	subgt	r3, r3, r2
 8001410:	18ed      	addgt	r5, r5, r3
 8001412:	2600      	movs	r6, #0
 8001414:	341a      	adds	r4, #26
 8001416:	42b5      	cmp	r5, r6
 8001418:	d11a      	bne.n	8001450 <_printf_common+0xc8>
 800141a:	2000      	movs	r0, #0
 800141c:	e008      	b.n	8001430 <_printf_common+0xa8>
 800141e:	2301      	movs	r3, #1
 8001420:	4652      	mov	r2, sl
 8001422:	4641      	mov	r1, r8
 8001424:	4638      	mov	r0, r7
 8001426:	47c8      	blx	r9
 8001428:	3001      	adds	r0, #1
 800142a:	d103      	bne.n	8001434 <_printf_common+0xac>
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001434:	3501      	adds	r5, #1
 8001436:	e7c6      	b.n	80013c6 <_printf_common+0x3e>
 8001438:	18e1      	adds	r1, r4, r3
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	2030      	movs	r0, #48	@ 0x30
 800143e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001442:	4422      	add	r2, r4
 8001444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800144c:	3302      	adds	r3, #2
 800144e:	e7c7      	b.n	80013e0 <_printf_common+0x58>
 8001450:	2301      	movs	r3, #1
 8001452:	4622      	mov	r2, r4
 8001454:	4641      	mov	r1, r8
 8001456:	4638      	mov	r0, r7
 8001458:	47c8      	blx	r9
 800145a:	3001      	adds	r0, #1
 800145c:	d0e6      	beq.n	800142c <_printf_common+0xa4>
 800145e:	3601      	adds	r6, #1
 8001460:	e7d9      	b.n	8001416 <_printf_common+0x8e>
	...

08001464 <_printf_i>:
 8001464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001468:	7e0f      	ldrb	r7, [r1, #24]
 800146a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800146c:	2f78      	cmp	r7, #120	@ 0x78
 800146e:	4691      	mov	r9, r2
 8001470:	4680      	mov	r8, r0
 8001472:	460c      	mov	r4, r1
 8001474:	469a      	mov	sl, r3
 8001476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800147a:	d807      	bhi.n	800148c <_printf_i+0x28>
 800147c:	2f62      	cmp	r7, #98	@ 0x62
 800147e:	d80a      	bhi.n	8001496 <_printf_i+0x32>
 8001480:	2f00      	cmp	r7, #0
 8001482:	f000 80d1 	beq.w	8001628 <_printf_i+0x1c4>
 8001486:	2f58      	cmp	r7, #88	@ 0x58
 8001488:	f000 80b8 	beq.w	80015fc <_printf_i+0x198>
 800148c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001494:	e03a      	b.n	800150c <_printf_i+0xa8>
 8001496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800149a:	2b15      	cmp	r3, #21
 800149c:	d8f6      	bhi.n	800148c <_printf_i+0x28>
 800149e:	a101      	add	r1, pc, #4	@ (adr r1, 80014a4 <_printf_i+0x40>)
 80014a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014a4:	080014fd 	.word	0x080014fd
 80014a8:	08001511 	.word	0x08001511
 80014ac:	0800148d 	.word	0x0800148d
 80014b0:	0800148d 	.word	0x0800148d
 80014b4:	0800148d 	.word	0x0800148d
 80014b8:	0800148d 	.word	0x0800148d
 80014bc:	08001511 	.word	0x08001511
 80014c0:	0800148d 	.word	0x0800148d
 80014c4:	0800148d 	.word	0x0800148d
 80014c8:	0800148d 	.word	0x0800148d
 80014cc:	0800148d 	.word	0x0800148d
 80014d0:	0800160f 	.word	0x0800160f
 80014d4:	0800153b 	.word	0x0800153b
 80014d8:	080015c9 	.word	0x080015c9
 80014dc:	0800148d 	.word	0x0800148d
 80014e0:	0800148d 	.word	0x0800148d
 80014e4:	08001631 	.word	0x08001631
 80014e8:	0800148d 	.word	0x0800148d
 80014ec:	0800153b 	.word	0x0800153b
 80014f0:	0800148d 	.word	0x0800148d
 80014f4:	0800148d 	.word	0x0800148d
 80014f8:	080015d1 	.word	0x080015d1
 80014fc:	6833      	ldr	r3, [r6, #0]
 80014fe:	1d1a      	adds	r2, r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6032      	str	r2, [r6, #0]
 8001504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800150c:	2301      	movs	r3, #1
 800150e:	e09c      	b.n	800164a <_printf_i+0x1e6>
 8001510:	6833      	ldr	r3, [r6, #0]
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	1d19      	adds	r1, r3, #4
 8001516:	6031      	str	r1, [r6, #0]
 8001518:	0606      	lsls	r6, r0, #24
 800151a:	d501      	bpl.n	8001520 <_printf_i+0xbc>
 800151c:	681d      	ldr	r5, [r3, #0]
 800151e:	e003      	b.n	8001528 <_printf_i+0xc4>
 8001520:	0645      	lsls	r5, r0, #25
 8001522:	d5fb      	bpl.n	800151c <_printf_i+0xb8>
 8001524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001528:	2d00      	cmp	r5, #0
 800152a:	da03      	bge.n	8001534 <_printf_i+0xd0>
 800152c:	232d      	movs	r3, #45	@ 0x2d
 800152e:	426d      	negs	r5, r5
 8001530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001534:	4858      	ldr	r0, [pc, #352]	@ (8001698 <_printf_i+0x234>)
 8001536:	230a      	movs	r3, #10
 8001538:	e011      	b.n	800155e <_printf_i+0xfa>
 800153a:	6821      	ldr	r1, [r4, #0]
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	0608      	lsls	r0, r1, #24
 8001540:	f853 5b04 	ldr.w	r5, [r3], #4
 8001544:	d402      	bmi.n	800154c <_printf_i+0xe8>
 8001546:	0649      	lsls	r1, r1, #25
 8001548:	bf48      	it	mi
 800154a:	b2ad      	uxthmi	r5, r5
 800154c:	2f6f      	cmp	r7, #111	@ 0x6f
 800154e:	4852      	ldr	r0, [pc, #328]	@ (8001698 <_printf_i+0x234>)
 8001550:	6033      	str	r3, [r6, #0]
 8001552:	bf14      	ite	ne
 8001554:	230a      	movne	r3, #10
 8001556:	2308      	moveq	r3, #8
 8001558:	2100      	movs	r1, #0
 800155a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800155e:	6866      	ldr	r6, [r4, #4]
 8001560:	60a6      	str	r6, [r4, #8]
 8001562:	2e00      	cmp	r6, #0
 8001564:	db05      	blt.n	8001572 <_printf_i+0x10e>
 8001566:	6821      	ldr	r1, [r4, #0]
 8001568:	432e      	orrs	r6, r5
 800156a:	f021 0104 	bic.w	r1, r1, #4
 800156e:	6021      	str	r1, [r4, #0]
 8001570:	d04b      	beq.n	800160a <_printf_i+0x1a6>
 8001572:	4616      	mov	r6, r2
 8001574:	fbb5 f1f3 	udiv	r1, r5, r3
 8001578:	fb03 5711 	mls	r7, r3, r1, r5
 800157c:	5dc7      	ldrb	r7, [r0, r7]
 800157e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001582:	462f      	mov	r7, r5
 8001584:	42bb      	cmp	r3, r7
 8001586:	460d      	mov	r5, r1
 8001588:	d9f4      	bls.n	8001574 <_printf_i+0x110>
 800158a:	2b08      	cmp	r3, #8
 800158c:	d10b      	bne.n	80015a6 <_printf_i+0x142>
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	07df      	lsls	r7, r3, #31
 8001592:	d508      	bpl.n	80015a6 <_printf_i+0x142>
 8001594:	6923      	ldr	r3, [r4, #16]
 8001596:	6861      	ldr	r1, [r4, #4]
 8001598:	4299      	cmp	r1, r3
 800159a:	bfde      	ittt	le
 800159c:	2330      	movle	r3, #48	@ 0x30
 800159e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015a6:	1b92      	subs	r2, r2, r6
 80015a8:	6122      	str	r2, [r4, #16]
 80015aa:	f8cd a000 	str.w	sl, [sp]
 80015ae:	464b      	mov	r3, r9
 80015b0:	aa03      	add	r2, sp, #12
 80015b2:	4621      	mov	r1, r4
 80015b4:	4640      	mov	r0, r8
 80015b6:	f7ff fee7 	bl	8001388 <_printf_common>
 80015ba:	3001      	adds	r0, #1
 80015bc:	d14a      	bne.n	8001654 <_printf_i+0x1f0>
 80015be:	f04f 30ff 	mov.w	r0, #4294967295
 80015c2:	b004      	add	sp, #16
 80015c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6023      	str	r3, [r4, #0]
 80015d0:	4832      	ldr	r0, [pc, #200]	@ (800169c <_printf_i+0x238>)
 80015d2:	2778      	movs	r7, #120	@ 0x78
 80015d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	6831      	ldr	r1, [r6, #0]
 80015dc:	061f      	lsls	r7, r3, #24
 80015de:	f851 5b04 	ldr.w	r5, [r1], #4
 80015e2:	d402      	bmi.n	80015ea <_printf_i+0x186>
 80015e4:	065f      	lsls	r7, r3, #25
 80015e6:	bf48      	it	mi
 80015e8:	b2ad      	uxthmi	r5, r5
 80015ea:	6031      	str	r1, [r6, #0]
 80015ec:	07d9      	lsls	r1, r3, #31
 80015ee:	bf44      	itt	mi
 80015f0:	f043 0320 	orrmi.w	r3, r3, #32
 80015f4:	6023      	strmi	r3, [r4, #0]
 80015f6:	b11d      	cbz	r5, 8001600 <_printf_i+0x19c>
 80015f8:	2310      	movs	r3, #16
 80015fa:	e7ad      	b.n	8001558 <_printf_i+0xf4>
 80015fc:	4826      	ldr	r0, [pc, #152]	@ (8001698 <_printf_i+0x234>)
 80015fe:	e7e9      	b.n	80015d4 <_printf_i+0x170>
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	f023 0320 	bic.w	r3, r3, #32
 8001606:	6023      	str	r3, [r4, #0]
 8001608:	e7f6      	b.n	80015f8 <_printf_i+0x194>
 800160a:	4616      	mov	r6, r2
 800160c:	e7bd      	b.n	800158a <_printf_i+0x126>
 800160e:	6833      	ldr	r3, [r6, #0]
 8001610:	6825      	ldr	r5, [r4, #0]
 8001612:	6961      	ldr	r1, [r4, #20]
 8001614:	1d18      	adds	r0, r3, #4
 8001616:	6030      	str	r0, [r6, #0]
 8001618:	062e      	lsls	r6, r5, #24
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	d501      	bpl.n	8001622 <_printf_i+0x1be>
 800161e:	6019      	str	r1, [r3, #0]
 8001620:	e002      	b.n	8001628 <_printf_i+0x1c4>
 8001622:	0668      	lsls	r0, r5, #25
 8001624:	d5fb      	bpl.n	800161e <_printf_i+0x1ba>
 8001626:	8019      	strh	r1, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	6123      	str	r3, [r4, #16]
 800162c:	4616      	mov	r6, r2
 800162e:	e7bc      	b.n	80015aa <_printf_i+0x146>
 8001630:	6833      	ldr	r3, [r6, #0]
 8001632:	1d1a      	adds	r2, r3, #4
 8001634:	6032      	str	r2, [r6, #0]
 8001636:	681e      	ldr	r6, [r3, #0]
 8001638:	6862      	ldr	r2, [r4, #4]
 800163a:	2100      	movs	r1, #0
 800163c:	4630      	mov	r0, r6
 800163e:	f7fe fde7 	bl	8000210 <memchr>
 8001642:	b108      	cbz	r0, 8001648 <_printf_i+0x1e4>
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	6060      	str	r0, [r4, #4]
 8001648:	6863      	ldr	r3, [r4, #4]
 800164a:	6123      	str	r3, [r4, #16]
 800164c:	2300      	movs	r3, #0
 800164e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001652:	e7aa      	b.n	80015aa <_printf_i+0x146>
 8001654:	6923      	ldr	r3, [r4, #16]
 8001656:	4632      	mov	r2, r6
 8001658:	4649      	mov	r1, r9
 800165a:	4640      	mov	r0, r8
 800165c:	47d0      	blx	sl
 800165e:	3001      	adds	r0, #1
 8001660:	d0ad      	beq.n	80015be <_printf_i+0x15a>
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	079b      	lsls	r3, r3, #30
 8001666:	d413      	bmi.n	8001690 <_printf_i+0x22c>
 8001668:	68e0      	ldr	r0, [r4, #12]
 800166a:	9b03      	ldr	r3, [sp, #12]
 800166c:	4298      	cmp	r0, r3
 800166e:	bfb8      	it	lt
 8001670:	4618      	movlt	r0, r3
 8001672:	e7a6      	b.n	80015c2 <_printf_i+0x15e>
 8001674:	2301      	movs	r3, #1
 8001676:	4632      	mov	r2, r6
 8001678:	4649      	mov	r1, r9
 800167a:	4640      	mov	r0, r8
 800167c:	47d0      	blx	sl
 800167e:	3001      	adds	r0, #1
 8001680:	d09d      	beq.n	80015be <_printf_i+0x15a>
 8001682:	3501      	adds	r5, #1
 8001684:	68e3      	ldr	r3, [r4, #12]
 8001686:	9903      	ldr	r1, [sp, #12]
 8001688:	1a5b      	subs	r3, r3, r1
 800168a:	42ab      	cmp	r3, r5
 800168c:	dcf2      	bgt.n	8001674 <_printf_i+0x210>
 800168e:	e7eb      	b.n	8001668 <_printf_i+0x204>
 8001690:	2500      	movs	r5, #0
 8001692:	f104 0619 	add.w	r6, r4, #25
 8001696:	e7f5      	b.n	8001684 <_printf_i+0x220>
 8001698:	08001a87 	.word	0x08001a87
 800169c:	08001a98 	.word	0x08001a98

080016a0 <__sflush_r>:
 80016a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	0716      	lsls	r6, r2, #28
 80016a8:	4605      	mov	r5, r0
 80016aa:	460c      	mov	r4, r1
 80016ac:	d454      	bmi.n	8001758 <__sflush_r+0xb8>
 80016ae:	684b      	ldr	r3, [r1, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dc02      	bgt.n	80016ba <__sflush_r+0x1a>
 80016b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dd48      	ble.n	800174c <__sflush_r+0xac>
 80016ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016bc:	2e00      	cmp	r6, #0
 80016be:	d045      	beq.n	800174c <__sflush_r+0xac>
 80016c0:	2300      	movs	r3, #0
 80016c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80016c6:	682f      	ldr	r7, [r5, #0]
 80016c8:	6a21      	ldr	r1, [r4, #32]
 80016ca:	602b      	str	r3, [r5, #0]
 80016cc:	d030      	beq.n	8001730 <__sflush_r+0x90>
 80016ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80016d0:	89a3      	ldrh	r3, [r4, #12]
 80016d2:	0759      	lsls	r1, r3, #29
 80016d4:	d505      	bpl.n	80016e2 <__sflush_r+0x42>
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80016dc:	b10b      	cbz	r3, 80016e2 <__sflush_r+0x42>
 80016de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016e0:	1ad2      	subs	r2, r2, r3
 80016e2:	2300      	movs	r3, #0
 80016e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016e6:	6a21      	ldr	r1, [r4, #32]
 80016e8:	4628      	mov	r0, r5
 80016ea:	47b0      	blx	r6
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	d106      	bne.n	8001700 <__sflush_r+0x60>
 80016f2:	6829      	ldr	r1, [r5, #0]
 80016f4:	291d      	cmp	r1, #29
 80016f6:	d82b      	bhi.n	8001750 <__sflush_r+0xb0>
 80016f8:	4a28      	ldr	r2, [pc, #160]	@ (800179c <__sflush_r+0xfc>)
 80016fa:	40ca      	lsrs	r2, r1
 80016fc:	07d6      	lsls	r6, r2, #31
 80016fe:	d527      	bpl.n	8001750 <__sflush_r+0xb0>
 8001700:	2200      	movs	r2, #0
 8001702:	6062      	str	r2, [r4, #4]
 8001704:	04d9      	lsls	r1, r3, #19
 8001706:	6922      	ldr	r2, [r4, #16]
 8001708:	6022      	str	r2, [r4, #0]
 800170a:	d504      	bpl.n	8001716 <__sflush_r+0x76>
 800170c:	1c42      	adds	r2, r0, #1
 800170e:	d101      	bne.n	8001714 <__sflush_r+0x74>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	b903      	cbnz	r3, 8001716 <__sflush_r+0x76>
 8001714:	6560      	str	r0, [r4, #84]	@ 0x54
 8001716:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001718:	602f      	str	r7, [r5, #0]
 800171a:	b1b9      	cbz	r1, 800174c <__sflush_r+0xac>
 800171c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001720:	4299      	cmp	r1, r3
 8001722:	d002      	beq.n	800172a <__sflush_r+0x8a>
 8001724:	4628      	mov	r0, r5
 8001726:	f7ff fbf7 	bl	8000f18 <_free_r>
 800172a:	2300      	movs	r3, #0
 800172c:	6363      	str	r3, [r4, #52]	@ 0x34
 800172e:	e00d      	b.n	800174c <__sflush_r+0xac>
 8001730:	2301      	movs	r3, #1
 8001732:	4628      	mov	r0, r5
 8001734:	47b0      	blx	r6
 8001736:	4602      	mov	r2, r0
 8001738:	1c50      	adds	r0, r2, #1
 800173a:	d1c9      	bne.n	80016d0 <__sflush_r+0x30>
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0c6      	beq.n	80016d0 <__sflush_r+0x30>
 8001742:	2b1d      	cmp	r3, #29
 8001744:	d001      	beq.n	800174a <__sflush_r+0xaa>
 8001746:	2b16      	cmp	r3, #22
 8001748:	d11d      	bne.n	8001786 <__sflush_r+0xe6>
 800174a:	602f      	str	r7, [r5, #0]
 800174c:	2000      	movs	r0, #0
 800174e:	e021      	b.n	8001794 <__sflush_r+0xf4>
 8001750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001754:	b21b      	sxth	r3, r3
 8001756:	e01a      	b.n	800178e <__sflush_r+0xee>
 8001758:	690f      	ldr	r7, [r1, #16]
 800175a:	2f00      	cmp	r7, #0
 800175c:	d0f6      	beq.n	800174c <__sflush_r+0xac>
 800175e:	0793      	lsls	r3, r2, #30
 8001760:	680e      	ldr	r6, [r1, #0]
 8001762:	bf08      	it	eq
 8001764:	694b      	ldreq	r3, [r1, #20]
 8001766:	600f      	str	r7, [r1, #0]
 8001768:	bf18      	it	ne
 800176a:	2300      	movne	r3, #0
 800176c:	1bf6      	subs	r6, r6, r7
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	2e00      	cmp	r6, #0
 8001772:	ddeb      	ble.n	800174c <__sflush_r+0xac>
 8001774:	6a21      	ldr	r1, [r4, #32]
 8001776:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800177a:	4633      	mov	r3, r6
 800177c:	463a      	mov	r2, r7
 800177e:	4628      	mov	r0, r5
 8001780:	47e0      	blx	ip
 8001782:	2800      	cmp	r0, #0
 8001784:	dc07      	bgt.n	8001796 <__sflush_r+0xf6>
 8001786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800178a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800178e:	81a3      	strh	r3, [r4, #12]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001796:	4407      	add	r7, r0
 8001798:	1a36      	subs	r6, r6, r0
 800179a:	e7e9      	b.n	8001770 <__sflush_r+0xd0>
 800179c:	20400001 	.word	0x20400001

080017a0 <_fflush_r>:
 80017a0:	b538      	push	{r3, r4, r5, lr}
 80017a2:	690b      	ldr	r3, [r1, #16]
 80017a4:	4605      	mov	r5, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	b913      	cbnz	r3, 80017b0 <_fflush_r+0x10>
 80017aa:	2500      	movs	r5, #0
 80017ac:	4628      	mov	r0, r5
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
 80017b0:	b118      	cbz	r0, 80017ba <_fflush_r+0x1a>
 80017b2:	6a03      	ldr	r3, [r0, #32]
 80017b4:	b90b      	cbnz	r3, 80017ba <_fflush_r+0x1a>
 80017b6:	f7ff faa7 	bl	8000d08 <__sinit>
 80017ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f3      	beq.n	80017aa <_fflush_r+0xa>
 80017c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80017c4:	07d0      	lsls	r0, r2, #31
 80017c6:	d404      	bmi.n	80017d2 <_fflush_r+0x32>
 80017c8:	0599      	lsls	r1, r3, #22
 80017ca:	d402      	bmi.n	80017d2 <_fflush_r+0x32>
 80017cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017ce:	f7ff fba0 	bl	8000f12 <__retarget_lock_acquire_recursive>
 80017d2:	4628      	mov	r0, r5
 80017d4:	4621      	mov	r1, r4
 80017d6:	f7ff ff63 	bl	80016a0 <__sflush_r>
 80017da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017dc:	07da      	lsls	r2, r3, #31
 80017de:	4605      	mov	r5, r0
 80017e0:	d4e4      	bmi.n	80017ac <_fflush_r+0xc>
 80017e2:	89a3      	ldrh	r3, [r4, #12]
 80017e4:	059b      	lsls	r3, r3, #22
 80017e6:	d4e1      	bmi.n	80017ac <_fflush_r+0xc>
 80017e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017ea:	f7ff fb93 	bl	8000f14 <__retarget_lock_release_recursive>
 80017ee:	e7dd      	b.n	80017ac <_fflush_r+0xc>

080017f0 <__swbuf_r>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	460e      	mov	r6, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	4605      	mov	r5, r0
 80017f8:	b118      	cbz	r0, 8001802 <__swbuf_r+0x12>
 80017fa:	6a03      	ldr	r3, [r0, #32]
 80017fc:	b90b      	cbnz	r3, 8001802 <__swbuf_r+0x12>
 80017fe:	f7ff fa83 	bl	8000d08 <__sinit>
 8001802:	69a3      	ldr	r3, [r4, #24]
 8001804:	60a3      	str	r3, [r4, #8]
 8001806:	89a3      	ldrh	r3, [r4, #12]
 8001808:	071a      	lsls	r2, r3, #28
 800180a:	d501      	bpl.n	8001810 <__swbuf_r+0x20>
 800180c:	6923      	ldr	r3, [r4, #16]
 800180e:	b943      	cbnz	r3, 8001822 <__swbuf_r+0x32>
 8001810:	4621      	mov	r1, r4
 8001812:	4628      	mov	r0, r5
 8001814:	f000 f82a 	bl	800186c <__swsetup_r>
 8001818:	b118      	cbz	r0, 8001822 <__swbuf_r+0x32>
 800181a:	f04f 37ff 	mov.w	r7, #4294967295
 800181e:	4638      	mov	r0, r7
 8001820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	6922      	ldr	r2, [r4, #16]
 8001826:	1a98      	subs	r0, r3, r2
 8001828:	6963      	ldr	r3, [r4, #20]
 800182a:	b2f6      	uxtb	r6, r6
 800182c:	4283      	cmp	r3, r0
 800182e:	4637      	mov	r7, r6
 8001830:	dc05      	bgt.n	800183e <__swbuf_r+0x4e>
 8001832:	4621      	mov	r1, r4
 8001834:	4628      	mov	r0, r5
 8001836:	f7ff ffb3 	bl	80017a0 <_fflush_r>
 800183a:	2800      	cmp	r0, #0
 800183c:	d1ed      	bne.n	800181a <__swbuf_r+0x2a>
 800183e:	68a3      	ldr	r3, [r4, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60a3      	str	r3, [r4, #8]
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	6022      	str	r2, [r4, #0]
 800184a:	701e      	strb	r6, [r3, #0]
 800184c:	6962      	ldr	r2, [r4, #20]
 800184e:	1c43      	adds	r3, r0, #1
 8001850:	429a      	cmp	r2, r3
 8001852:	d004      	beq.n	800185e <__swbuf_r+0x6e>
 8001854:	89a3      	ldrh	r3, [r4, #12]
 8001856:	07db      	lsls	r3, r3, #31
 8001858:	d5e1      	bpl.n	800181e <__swbuf_r+0x2e>
 800185a:	2e0a      	cmp	r6, #10
 800185c:	d1df      	bne.n	800181e <__swbuf_r+0x2e>
 800185e:	4621      	mov	r1, r4
 8001860:	4628      	mov	r0, r5
 8001862:	f7ff ff9d 	bl	80017a0 <_fflush_r>
 8001866:	2800      	cmp	r0, #0
 8001868:	d0d9      	beq.n	800181e <__swbuf_r+0x2e>
 800186a:	e7d6      	b.n	800181a <__swbuf_r+0x2a>

0800186c <__swsetup_r>:
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <__swsetup_r+0xa8>)
 8001870:	4605      	mov	r5, r0
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	460c      	mov	r4, r1
 8001876:	b118      	cbz	r0, 8001880 <__swsetup_r+0x14>
 8001878:	6a03      	ldr	r3, [r0, #32]
 800187a:	b90b      	cbnz	r3, 8001880 <__swsetup_r+0x14>
 800187c:	f7ff fa44 	bl	8000d08 <__sinit>
 8001880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001884:	0719      	lsls	r1, r3, #28
 8001886:	d422      	bmi.n	80018ce <__swsetup_r+0x62>
 8001888:	06da      	lsls	r2, r3, #27
 800188a:	d407      	bmi.n	800189c <__swsetup_r+0x30>
 800188c:	2209      	movs	r2, #9
 800188e:	602a      	str	r2, [r5, #0]
 8001890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001894:	81a3      	strh	r3, [r4, #12]
 8001896:	f04f 30ff 	mov.w	r0, #4294967295
 800189a:	e033      	b.n	8001904 <__swsetup_r+0x98>
 800189c:	0758      	lsls	r0, r3, #29
 800189e:	d512      	bpl.n	80018c6 <__swsetup_r+0x5a>
 80018a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018a2:	b141      	cbz	r1, 80018b6 <__swsetup_r+0x4a>
 80018a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018a8:	4299      	cmp	r1, r3
 80018aa:	d002      	beq.n	80018b2 <__swsetup_r+0x46>
 80018ac:	4628      	mov	r0, r5
 80018ae:	f7ff fb33 	bl	8000f18 <_free_r>
 80018b2:	2300      	movs	r3, #0
 80018b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80018b6:	89a3      	ldrh	r3, [r4, #12]
 80018b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80018bc:	81a3      	strh	r3, [r4, #12]
 80018be:	2300      	movs	r3, #0
 80018c0:	6063      	str	r3, [r4, #4]
 80018c2:	6923      	ldr	r3, [r4, #16]
 80018c4:	6023      	str	r3, [r4, #0]
 80018c6:	89a3      	ldrh	r3, [r4, #12]
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	81a3      	strh	r3, [r4, #12]
 80018ce:	6923      	ldr	r3, [r4, #16]
 80018d0:	b94b      	cbnz	r3, 80018e6 <__swsetup_r+0x7a>
 80018d2:	89a3      	ldrh	r3, [r4, #12]
 80018d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80018d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018dc:	d003      	beq.n	80018e6 <__swsetup_r+0x7a>
 80018de:	4621      	mov	r1, r4
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 f84f 	bl	8001984 <__smakebuf_r>
 80018e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ea:	f013 0201 	ands.w	r2, r3, #1
 80018ee:	d00a      	beq.n	8001906 <__swsetup_r+0x9a>
 80018f0:	2200      	movs	r2, #0
 80018f2:	60a2      	str	r2, [r4, #8]
 80018f4:	6962      	ldr	r2, [r4, #20]
 80018f6:	4252      	negs	r2, r2
 80018f8:	61a2      	str	r2, [r4, #24]
 80018fa:	6922      	ldr	r2, [r4, #16]
 80018fc:	b942      	cbnz	r2, 8001910 <__swsetup_r+0xa4>
 80018fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001902:	d1c5      	bne.n	8001890 <__swsetup_r+0x24>
 8001904:	bd38      	pop	{r3, r4, r5, pc}
 8001906:	0799      	lsls	r1, r3, #30
 8001908:	bf58      	it	pl
 800190a:	6962      	ldrpl	r2, [r4, #20]
 800190c:	60a2      	str	r2, [r4, #8]
 800190e:	e7f4      	b.n	80018fa <__swsetup_r+0x8e>
 8001910:	2000      	movs	r0, #0
 8001912:	e7f7      	b.n	8001904 <__swsetup_r+0x98>
 8001914:	2000000c 	.word	0x2000000c

08001918 <_sbrk_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4d06      	ldr	r5, [pc, #24]	@ (8001934 <_sbrk_r+0x1c>)
 800191c:	2300      	movs	r3, #0
 800191e:	4604      	mov	r4, r0
 8001920:	4608      	mov	r0, r1
 8001922:	602b      	str	r3, [r5, #0]
 8001924:	f7ff f904 	bl	8000b30 <_sbrk>
 8001928:	1c43      	adds	r3, r0, #1
 800192a:	d102      	bne.n	8001932 <_sbrk_r+0x1a>
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	b103      	cbz	r3, 8001932 <_sbrk_r+0x1a>
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	bd38      	pop	{r3, r4, r5, pc}
 8001934:	200001b8 	.word	0x200001b8

08001938 <__swhatbuf_r>:
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	460c      	mov	r4, r1
 800193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001940:	2900      	cmp	r1, #0
 8001942:	b096      	sub	sp, #88	@ 0x58
 8001944:	4615      	mov	r5, r2
 8001946:	461e      	mov	r6, r3
 8001948:	da0d      	bge.n	8001966 <__swhatbuf_r+0x2e>
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	bf14      	ite	ne
 8001956:	2340      	movne	r3, #64	@ 0x40
 8001958:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800195c:	2000      	movs	r0, #0
 800195e:	6031      	str	r1, [r6, #0]
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	b016      	add	sp, #88	@ 0x58
 8001964:	bd70      	pop	{r4, r5, r6, pc}
 8001966:	466a      	mov	r2, sp
 8001968:	f000 f848 	bl	80019fc <_fstat_r>
 800196c:	2800      	cmp	r0, #0
 800196e:	dbec      	blt.n	800194a <__swhatbuf_r+0x12>
 8001970:	9901      	ldr	r1, [sp, #4]
 8001972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800197a:	4259      	negs	r1, r3
 800197c:	4159      	adcs	r1, r3
 800197e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001982:	e7eb      	b.n	800195c <__swhatbuf_r+0x24>

08001984 <__smakebuf_r>:
 8001984:	898b      	ldrh	r3, [r1, #12]
 8001986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001988:	079d      	lsls	r5, r3, #30
 800198a:	4606      	mov	r6, r0
 800198c:	460c      	mov	r4, r1
 800198e:	d507      	bpl.n	80019a0 <__smakebuf_r+0x1c>
 8001990:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001994:	6023      	str	r3, [r4, #0]
 8001996:	6123      	str	r3, [r4, #16]
 8001998:	2301      	movs	r3, #1
 800199a:	6163      	str	r3, [r4, #20]
 800199c:	b003      	add	sp, #12
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	ab01      	add	r3, sp, #4
 80019a2:	466a      	mov	r2, sp
 80019a4:	f7ff ffc8 	bl	8001938 <__swhatbuf_r>
 80019a8:	9f00      	ldr	r7, [sp, #0]
 80019aa:	4605      	mov	r5, r0
 80019ac:	4639      	mov	r1, r7
 80019ae:	4630      	mov	r0, r6
 80019b0:	f7ff fb1e 	bl	8000ff0 <_malloc_r>
 80019b4:	b948      	cbnz	r0, 80019ca <__smakebuf_r+0x46>
 80019b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ba:	059a      	lsls	r2, r3, #22
 80019bc:	d4ee      	bmi.n	800199c <__smakebuf_r+0x18>
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	81a3      	strh	r3, [r4, #12]
 80019c8:	e7e2      	b.n	8001990 <__smakebuf_r+0xc>
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	6020      	str	r0, [r4, #0]
 80019ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d2:	81a3      	strh	r3, [r4, #12]
 80019d4:	9b01      	ldr	r3, [sp, #4]
 80019d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80019da:	b15b      	cbz	r3, 80019f4 <__smakebuf_r+0x70>
 80019dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019e0:	4630      	mov	r0, r6
 80019e2:	f000 f81d 	bl	8001a20 <_isatty_r>
 80019e6:	b128      	cbz	r0, 80019f4 <__smakebuf_r+0x70>
 80019e8:	89a3      	ldrh	r3, [r4, #12]
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	81a3      	strh	r3, [r4, #12]
 80019f4:	89a3      	ldrh	r3, [r4, #12]
 80019f6:	431d      	orrs	r5, r3
 80019f8:	81a5      	strh	r5, [r4, #12]
 80019fa:	e7cf      	b.n	800199c <__smakebuf_r+0x18>

080019fc <_fstat_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4d07      	ldr	r5, [pc, #28]	@ (8001a1c <_fstat_r+0x20>)
 8001a00:	2300      	movs	r3, #0
 8001a02:	4604      	mov	r4, r0
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	602b      	str	r3, [r5, #0]
 8001a0a:	f7ff f86b 	bl	8000ae4 <_fstat>
 8001a0e:	1c43      	adds	r3, r0, #1
 8001a10:	d102      	bne.n	8001a18 <_fstat_r+0x1c>
 8001a12:	682b      	ldr	r3, [r5, #0]
 8001a14:	b103      	cbz	r3, 8001a18 <_fstat_r+0x1c>
 8001a16:	6023      	str	r3, [r4, #0]
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001b8 	.word	0x200001b8

08001a20 <_isatty_r>:
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	4d06      	ldr	r5, [pc, #24]	@ (8001a3c <_isatty_r+0x1c>)
 8001a24:	2300      	movs	r3, #0
 8001a26:	4604      	mov	r4, r0
 8001a28:	4608      	mov	r0, r1
 8001a2a:	602b      	str	r3, [r5, #0]
 8001a2c:	f7ff f869 	bl	8000b02 <_isatty>
 8001a30:	1c43      	adds	r3, r0, #1
 8001a32:	d102      	bne.n	8001a3a <_isatty_r+0x1a>
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	b103      	cbz	r3, 8001a3a <_isatty_r+0x1a>
 8001a38:	6023      	str	r3, [r4, #0]
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
 8001a3c:	200001b8 	.word	0x200001b8

08001a40 <_init>:
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a42:	bf00      	nop
 8001a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a46:	bc08      	pop	{r3}
 8001a48:	469e      	mov	lr, r3
 8001a4a:	4770      	bx	lr

08001a4c <_fini>:
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4e:	bf00      	nop
 8001a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a52:	bc08      	pop	{r3}
 8001a54:	469e      	mov	lr, r3
 8001a56:	4770      	bx	lr
