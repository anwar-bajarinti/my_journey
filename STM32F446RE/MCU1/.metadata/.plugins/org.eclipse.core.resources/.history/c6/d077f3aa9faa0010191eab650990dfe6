/*
 * STM32F446RE.h
 *
 *  Created on: Oct 13, 2025
 *      Author: notty
 */

#ifndef STM32F446RE_H_
#define STM32F446RE_H_
//  flash and ram addresses
#define FLASH_BASEADDR            0x08000000UL
#define SRAM1_BASEADDR        0x20000000UL
#define SRAM   			      SRAM1_ADDR
#define SRAM2_BASEADDR		  0x2001C000UL
#define ROM_BASEADDR		  0x1FFF0000UL
//  PERIPHERALS AND BUSES  BASE ADDRESSSES
#define PERIPHE_BASEADDR         0x40000000UL
#define AHB1_BASEADDR			0x40020000UL
#define AHB2_BASEADDR			0x50000000UL
#define AHB3_BASEADDR			0x60000000UL
#define APB1_BASEADDR			0x40000000UL
#define APB2_BASEADDR 			0x40010000UL

// BASE ADDRESS OF ALL PHERIPHERALS WHICH ARE HANGING PM AHB1
#define GPIOA_BASEADDR         ( AHB1_BASEADDR + 0X0000UL)
#define GPIOB_BASEADDR         ( AHB1_BASEADDR + 0X0400UL )
#define GPIOC_BASEADDR         ( AHB1_BASEADDR + 0X0800UL )
#define GPIOD_BASEADDR         ( AHB1_BASEADDR + 0X0C00UL )
#define GPIOE_BASEADDR         ( AHB1_BASEADDR + 0X1000UL )
#define GPIOF_BASEADDR         ( AHB1_BASEADDR + 0X1400UL )
#define GPIOG_BASEADDR         ( AHB1_BASEADDR + 0X1800UL )
#define GPIOH_BASEADDR         ( AHB1_BASEADDR + 0X1C00UL )
#define  CRC_BASEADDR         ( AHB1_BASEADDR + 0X3000UL )
#define  RCC_BASEADDR         ( AHB1_BASEADDR + 0X3800UL )
#define  Flash_interface_registe_BASEADDR    ( AHB1_BASEADDR + 0X3C00UL )
#define  BKPSRAM_BASEADDR         ( AHB1_BASEADDR + 0X4000UL )
#define  DMA1_BASEADDR         ( AHB1_BASEADDR + 0X6000UL )
#define DMA2_BASEADDR         ( AHB1_BASEADDR + 0X6400UL )

// BASE ADDRESS OF ALL PHERIPHERALS WHICH ARE HANGING PM AHB2


// BASE ADDRESS OF ALL PHERIPHERALS WHICH ARE HANGING PM APB1
#define  TIM2_BASEADDR			( APB1_BASEADDR +  0X0000UL )
#define  TIM3_BASEADDR			( APB1_BASEADDR +  0X0400UL )
#define  TIM4_BASEADDR			( APB1_BASEADDR +  0X0800UL )
#define  TIM5_BASEADDR			( APB1_BASEADDR +  0X0C00UL )
#define  TIM6_BASEADDR			( APB1_BASEADDR +  0X1000UL )
#define  TIM7_BASEADDR			( APB1_BASEADDR +  0X1400UL )
#define  TIM12_BASEADDR			( APB1_BASEADDR +  0X1800UL )
#define  TIM13_BASEADDR			( APB1_BASEADDR +  0X1C00UL )
#define  TIM14_BASEADDR			( APB1_BASEADDR +  0X2000UL )
#define  RTC_BKP_BASEADDR		( APB1_BASEADDR +  0X2800UL )
#define  WWDG_BASEADDR		    ( APB1_BASEADDR +  0X2C00UL )
#define  IWDG_BASEADDR	    	( APB1_BASEADDR +  0X3000UL )
#define  RTC_BKP_BASEADDR		( APB1_BASEADDR +  0X2800UL )
#define   SPI2_I2S2_BASEADDR	( APB1_BASEADDR +  0X3800UL )
#define  SPI3_I2S3_BASEADDR		( APB1_BASEADDR +  0X3C00UL )
#define   SPDIF_RX_BASEADDR		( APB1_BASEADDR +  0X4000UL )
#define  USART2_BASEADDR		( APB1_BASEADDR +  0X4400UL )
#define   USART3_BASEADDR		( APB1_BASEADDR +  0X4800UL )
#define  UART4_BASEADDR		    ( APB1_BASEADDR +  0X4C00UL )
#define   UART5_BASEADDR		( APB1_BASEADDR +  0X5000UL )
#define   I2C1_BASEADDR		    ( APB1_BASEADDR +  0X5400UL )
#define  I2C2_BASEADDR		    ( APB1_BASEADDR +  0X5800UL )
#define   I2C3_BASEADDR		    ( APB1_BASEADDR +  0X5C00UL )
#define   CAN1_BASEADDR		    ( APB1_BASEADDR +  0X6400UL )
#define  CAN2_BASEADDR		    ( APB1_BASEADDR +  0X6800UL )
#define   HDMI_CEC_BASEADDR		( APB1_BASEADDR +  0X6C00UL )
#define   PWR_BASEADDR		    ( APB1_BASEADDR +  0X7000UL )
#define  DAC_BASEADDR		    ( APB1_BASEADDR +  0X7400UL )

// // BASE ADDRESS OF ALL PHERIPHERALS WHICH ARE HANGING PM APB2
#define  TIM1_BASEADDR		    ( APB2_BASEADDR + 0X0000UL )
#define   TIM8_BASEADDR		    ( APB2_BASEADDR + 0X0400UL )
#define   USART1_BASEADDR		 ( APB2_BASEADDR + 0X1000UL )
#define   USART6_BASEADDR		( APB2_BASEADDR + 0X1400UL )
#define   ADC1_ADC2_ADC3_BASEADDR		    ( APB2_BASEADDR + 0X2000UL )
#define   SDMMC_BASEADDR		    ( APB2_BASEADDR + 0X2C00UL )
#define  SPI1_BASEADDR		    ( APB2_BASEADDR + 0X3000UL )
#define   SPI4_BASEADDR		    ( APB2_BASEADDR + 0X3400UL )
#define   SYSCFG_BASEADDR		( APB2_BASEADDR + 0X3800UL )
#define  EXTI_BASEADDR		    ( APB2_BASEADDR + 0X3C00UL )
#define   TIM9_BASEADDR		    ( APB2_BASEADDR + 0X4000UL )
#define  TIM10_BASEADDR		    ( APB2_BASEADDR + 0X4400UL )
#define   TIM11_BASEADDR		 ( APB2_BASEADDR + 0X4800UL )
#define  SAI1_BASEADDR		    ( APB2_BASEADDR + 0X5800UL )
#define  SAI2_BASEADDR		    ( APB2_BASEADDR + 0X5C00UL )

// CLOCK ENABLE  MACRO  FOR I2CX
#define I2C1_PCLK_EN()  (RCC->APB1_BASEADDR |=(1<<21) )
#define I2C2_PCLK_EN()  (RCC->APB1_BASEADDR |=(1<<22) )
#define I2C3_PCLK_EN()  (RCC->APB1_BASEADDR |=(1<<23) )
// CLOCK ENABLE MACRO FOR SPIX
#define SPI2_PCLK_EN()  (RCC->APB1_BASEADDR |=(1<<14) )
#define SPI3_PCLK_EN()  (RCC->APB1_BASEADDR |=(1<<15) )
#define SPI1_PCLK_EN()  (RCC->APB2_BASEADDR |=(1<<12) )
#define SPI4_PCLK_EN()  (RCC->APB2_BASEADDR |=(1<<13) )

// CLOCK ENABLE  MACROS FOR USARTX PHERIPHERALS
#define USART2_PCLK_EN() (RCC->APB1_BASEADDR |=(1<<17) )
#define USART3_PCLK_EN() (RCC->APB1_BASEADDR |=(1<<18) )
#define USART1_PCLK_EN() (RCC->APB2_BASEADDR |=(1<<4) )
#define USART6_PCLK_EN() (RCC->APB2_BASEADDR |=(1<<5) )
// CLOCK ENABLE MACRO FOR SYS CONFIG
#define  SYSCFG_PCLK_EN()  (RCC->APB2_BASEADDR |=(1<<14) )
// DISABLES

// CLOCK DISABLE  MACRO  FOR I2CX
#define I2C1_PCLK_DI()  (RCC->APB1_BASEADDR &=~(1<<21) )
#define I2C2_PCLK_DI()  (RCC->APB1_BASEADDR &=~(1<<22) )
#define I2C3_PCLK_DI()  (RCC->APB1_BASEADDR &=~(1<<23) )
// CLOCK DISABLE MACRO FOR SPIX
#define SPI2_PCLK_DI()  (RCC->APB1_BASEADDR &=~(1<<14) )
#define SPI3_PCLK_DI()  (RCC->APB1_BASEADDR &=~(1<<15) )
#define SPI1_PCLK_DI()  (RCC->APB2_BASEADDR &=~(1<<12) )
#define SPI4_PCLK_DI()  (RCC->APB2_BASEADDR &=~(1<<13) )

// CLOCK DISABLE  MACROS FOR USARTX PHERIPHERALS
#define USART2_PCLK_DI() (RCC->APB1_BASEADDR &=~(1<<17) )
#define USART3_PCLK_DI() (RCC->APB1_BASEADDR &=~(1<<18) )
#define USART1_PCLK_DI() (RCC->APB2_BASEADDR &=~(1<<4) )
#define USART6_PCLK_DI() (RCC->APB2_BASEADDR &=~(1<<5) )
// CLOCK DISABLE MACRO FOR SYS CONFIG
#define  SYSCFG_PCLK_DI()  (RCC->APB2_BASEADDR &=~(1<<14) )









//#define

// volatile macro
#define __vo  volatile

// GPIO REGISTERS STRUCT DEFINATIONS
//  This section gives a  description  REG of the GPIO registers.
 typedef struct
 {  __vo uint32_t   MODER;  //GPIO port mode register ; Address offset: 0x00
    __vo uint32_t    OTYPER; //GPIO port output type register ;   Address offset: 0x04
    __vo uint32_t    OSPEEDER ; //GPIO port output speed register ; Address offset: 0x08
    __vo uint32_t   PUPDR;  // GPIO port pull-up/pull-down register ;  Address offset: 0x0C
    __vo uint32_t   IDR ; // GPIO port input data register ; Address offset: 0x10
    __vo uint32_t   ODR ; // GPIO port output data register ;  Address offset: 0x14
    __vo uint32_t   BSRR ; // GPIO port bit set/reset register ;  Address offset: 0x18
    __vo uint32_t   LCKR; // GPIO port configuration lock register  ; Address offset: 0x1C
    __vo uint32_t   AFR[2]; // GPIO alternate function low register ; Address offset: 0x20 // GPIO alternate function high register ; Address offset: 0x24


 }GPIO_Reg_Def;
 // GPIO DEFINATIONS
#define  GPIOA  ((GPIO_Reg_Def*)GPIOA_BASEADDR)
#define  GPIOB  ((GPIO_Reg_Def*)GPIOB_BASEADDR)
#define  GPIOC  ((GPIO_Reg_Def*)GPIOC_BASEADDR)
#define  GPIOD  ((GPIO_Reg_Def*)GPIOD_BASEADDR)
#define  GPIOE  ((GPIO_Reg_Def*)GPIOE_BASEADDR)
#define  GPIOF  ((GPIO_Reg_Def*)GPIOF_BASEADDR)
#define  GPIOG  ((GPIO_Reg_Def*)GPIOG_BASEADDR)
#define  GPIOH  ((GPIO_Reg_Def*)GPIOH_BASEADDR)

 // RCC REGISTERS DEFINATIONS

 typedef struct
 {  __vo uint32_t     RCC_CR_BASEADDR;   //  Address offset: 0x00
    __vo uint32_t      RCC_PLLCFGR_BASEADDR;   //  Address offset: 0x04
    __vo uint32_t      RCC_CFGR_BASEADDR;	 //  Address offset: 0x08
    __vo uint32_t     RCC_CIR_BASEADDR;	 //  Address offset: 0x0C
    __vo uint32_t     RCC_AHB1RSTR_BASEADDR;	 //  Address offset: 0x10
    __vo uint32_t      RCC_AHB2RSTR_BASEADDR;	 //  Address offset: 0x14
    __vo uint32_t     RCC_AHB3RSTR_BASEADDR;	 //  Address offset: 0x18
    __vo uint32_t     Reserved1_BASEADDR;	 //  Address offset:0x1C
    __vo uint32_t      RCC_APB1RSTR_BASEADDR;	 //  Address offset:0x20
    __vo uint32_t      RCC_APB2RSTR_BASEADDR;	 //  Address offset:0x24
    __vo uint32_t      Reserved2_BASEADDR;	 //  Address offset:0x28
    __vo uint32_t      Reserved3_BASEADDR;	 //  Address offset:0x2C
    __vo uint32_t      RCC_AHB1ENR_BASEADDR;	 //  Address offset:0x30
    __vo uint32_t      RCC_AHB2ENR_BASEADDR;	 //  Address offset:0x34
    __vo uint32_t      RCC_AHB3ENR_BASEADDR;	 //  Address offset:0x38
    __vo uint32_t      Reserved4_BASEADDR;	 //  Address offset:0x3C
    __vo uint32_t       RCC_APB1ENR_BASEADDR;	 //  Address offset:0x40
    __vo uint32_t       RCC_APB2ENR_BASEADDR;	 //  Address offset:0x44
    __vo uint32_t      Reserved5_BASEADDR;	 //  Address offset:0x48
    __vo uint32_t      Reserved6_BASEADDR;	 //  Address offset:0x4C
    __vo uint32_t       RCC_AHB1LPENR_BASEADDR;	 //  Address offset: 0x50
    __vo uint32_t      RCC_AHB2LPENR_BASEADDR;	 //  Address offset:0x54
    __vo uint32_t       RCC_AHB3LPENR_BASEADDR;	 //  Address offset:0x58
    __vo uint32_t      Reserved7_BASEADDR;	 //  Address offset:0x5C
    __vo uint32_t       RCC_APB1LPENR_BASEADDR;	 //  Address offset:0x60
    __vo uint32_t       RCC_APB2LPENR_BASEADDR;	 //  Address offset:0x64
    __vo uint32_t      Reserved8_BASEADDR;	 //  Address offset:0x68
    __vo uint32_t      Reserved9_BASEADDR;	 //  Address offset: 0x6C
    __vo uint32_t       RCC_BDCR_BASEADDR;	 //  Address offset:0x70
    __vo uint32_t       RCC_CSR_BASEADDR;	 //  Address offset:0x74
    __vo uint32_t      Reserved10_BASEADDR;	 //  Address offset:0x78
    __vo uint32_t      Reserved11_BASEADDR;	 //  Address offset:0x7C
    __vo uint32_t       RCC_SSCGR_BASEADDR;	 //  Address offset:0x80
    __vo uint32_t       RCC_PLLI2SCFGR_BASEADDR;	 //  Address offset: 0x84
    __vo uint32_t       RCC_PLLSAICFGR_BASEADDR;	 //  Address offset:0x88
    __vo uint32_t       RCC_DCKCFGR_BASEADDR;	 //  Address offset:0x8C
    __vo uint32_t       RCC_CKGATENR_BASEADDR;	 //  Address offset:0x90
    __vo uint32_t      RCC_DCKCFGR2_BASEADDR;	 //  Address offset:0x94
 }RCC_RegDef;

#define RCC   ((RCC_RegDef*)RCC_BASEADDR )
 // GPIO PERIPHERAL CLOCK ENABLE AND DISABLE MACROS
#define GPIOA_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<0) )
#define GPIOB_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<1) )
#define GPIOC_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<2) )
#define GPIOD_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<3) )
#define GPIOE_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<4) )
#define GPIOF_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<5) )
#define GPIOG_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<6) )
#define GPIOH_PCLK_EN()    ( RCC->AHB1_BASEADDR |=(1<<7) )
 // MACRO FOR GPIO REG RESET
#define GPIOA_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<0);}while(0)
#define GPIOB_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<1);}while(0)
#define GPIOC_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<2);}while(0)
#define GPIOD_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<3);}while(0)
#define GPIOE_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<4);}while(0)
#define GPIOF_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<5);}while(0)
#define GPIOG_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<6);}while(0)
#define GPIOH_REG_RESET   do{ RCC->AHB1RSTR |=(1<<0);  RCC->AHB1RSTR &=~(1<<7);}while(0)

#define ENABLE 1
#define DISABLE 0
#define SET ENABLE
#define RESET DISABLE
#define GPIO_PIN_SET ENABLE
#define GPIO_PIN_RESET DISABLE
#include"STM32F446RE_GPIO_DRIVER.h"

#endif /* STM32F446RE_H_ */
