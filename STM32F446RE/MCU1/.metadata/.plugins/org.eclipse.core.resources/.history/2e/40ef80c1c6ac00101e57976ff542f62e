/**
 ******************************************************************************
 * @file           : STM32F446RE.h
 * @author         : notty
 * @brief          : MCU-Specific Header File for STM32F446RE
 * @date           : Created on: Oct 13, 2025
 ******************************************************************************
 */

#ifndef STM32F446RE_H_
#define STM32F446RE_H_

#include <stdint.h>

/**
 * @defgroup Generic_Macros Generic Macros
 * @{
 */
#define __vo volatile

#define ENABLE         1
#define DISABLE        0
#define SET            ENABLE
#define RESET          DISABLE
#define GPIO_PIN_SET   SET
#define GPIO_PIN_RESET RESET
/**
 * @}
 */

/******************************************************************************/
/* */
/* CORE & MEMORY BASE ADDRESSES                          */
/* */
/******************************************************************************/
/**
 * @defgroup Core_Memory_Base_Addresses Core & Memory Base Addresses
 * @{
 */
#define FLASH_BASEADDR                  0x08000000UL  /*!< FLASH base address */
#define SRAM1_BASEADDR                  0x20000000UL  /*!< SRAM1 (112 KB) base address */
#define SRAM2_BASEADDR                  0x2001C000UL  /*!< SRAM2 (16 KB) base address */
#define ROM_BASEADDR                    0x1FFF0000UL  /*!< System Memory (ROM) base address */
#define SRAM                            SRAM1_BASEADDR
/**
 * @}
 */

/******************************************************************************/
/* */
/* BUS PERIPHERAL BASE ADDRESSES                           */
/* */
/******************************************************************************/
/**
 * @defgroup Bus_Peripheral_Base_Addresses Bus Peripheral Base Addresses
 * @{
 */
#define PERIPH_BASEADDR                 0x40000000UL  /*!< Peripheral base address */
#define APB1_BASEADDR                   PERIPH_BASEADDR /*!< APB1 bus base address */
#define APB2_BASEADDR                   0x40010000UL  /*!< APB2 bus base address */
#define AHB1_BASEADDR                   0x40020000UL  /*!< AHB1 bus base address */
#define AHB2_BASEADDR                   0x50000000UL  /*!< AHB2 bus base address */
#define AHB3_BASEADDR                   0x60000000UL  /*!< AHB3 bus base address */
/**
 * @}
 */

/******************************************************************************/
/* */
/* AHB1 PERIPHERAL BASE ADDRESSES                             */
/* */
/******************************************************************************/
/**
 * @defgroup AHB1_Peripheral_Base_Addresses AHB1 Peripheral Base Addresses
 * @{
 */
#define GPIOA_BASEADDR                  (AHB1_BASEADDR + 0x0000UL)
#define GPIOB_BASEADDR                  (AHB1_BASEADDR + 0x0400UL)
#define GPIOC_BASEADDR                  (AHB1_BASEADDR + 0x0800UL)
#define GPIOD_BASEADDR                  (AHB1_BASEADDR + 0x0C00UL)
#define GPIOE_BASEADDR                  (AHB1_BASEADDR + 0x1000UL)
#define GPIOF_BASEADDR                  (AHB1_BASEADDR + 0x1400UL)
#define GPIOG_BASEADDR                  (AHB1_BASEADDR + 0x1800UL)
#define GPIOH_BASEADDR                  (AHB1_BASEADDR + 0x1C00UL)
#define RCC_BASEADDR                    (AHB1_BASEADDR + 0x3800UL)
/**
 * @}
 */

/******************************************************************************/
/* */
/* APB2 PERIPHERAL BASE ADDRESSES                             */
/* */
/******************************************************************************/
/**
 * @defgroup APB2_Peripheral_Base_Addresses APB2 Peripheral Base Addresses
 * @{
 */
#define SYSCFG_BASEADDR                 (APB2_BASEADDR + 0x3800UL)
#define EXTI_BASEADDR                   (APB2_BASEADDR + 0x3C00UL)
/**
 * @}
 */


/******************************************************************************/
/* */
/* PERIPHERAL REGISTER DEFINITION STRUCTURES                     */
/* */
/******************************************************************************/

/**
 * @brief GPIO Register Definition Structure
 */
typedef struct
{
    __vo uint32_t MODER;    /*!< GPIO port mode register,                   Offset: 0x00 */
    __vo uint32_t OTYPER;   /*!< GPIO port output type register,            Offset: 0x04 */
    __vo uint32_t OSPEEDR;  /*!< GPIO port output speed register,           Offset: 0x08 */
    __vo uint32_t PUPDR;    /*!< GPIO port pull-up/pull-down register,      Offset: 0x0C */
    __vo uint32_t IDR;      /*!< GPIO port input data register,             Offset: 0x10 */
    __vo uint32_t ODR;      /*!< GPIO port output data register,            Offset: 0x14 */
    __vo uint32_t BSRR;     /*!< GPIO port bit set/reset register,          Offset: 0x18 */
    __vo uint32_t LCKR;     /*!< GPIO port configuration lock register,     Offset: 0x1C */
    __vo uint32_t AFR[2];   /*!< AFR[0]: AFRL, AFR[1]: AFRH                Offset: 0x20-0x24 */
} GPIO_RegDef;

/**
 * @brief Reset and Clock Control (RCC) Register Definition Structure
 */
typedef struct
{
    __vo uint32_t CR;             /*!< RCC clock control register,                Offset: 0x00 */
    __vo uint32_t PLLCFGR;        /*!< RCC PLL configuration register,            Offset: 0x04 */
    __vo uint32_t CFGR;           /*!< RCC clock configuration register,          Offset: 0x08 */
    __vo uint32_t CIR;            /*!< RCC clock interrupt register,              Offset: 0x0C */
    __vo uint32_t AHB1RSTR;       /*!< RCC AHB1 peripheral reset register,        Offset: 0x10 */
    __vo uint32_t AHB2RSTR;       /*!< RCC AHB2 peripheral reset register,        Offset: 0x14 */
    __vo uint32_t AHB3RSTR;       /*!< RCC AHB3 peripheral reset register,        Offset: 0x18 */
    uint32_t      RESERVED0;      /*!< Reserved,                                  Offset: 0x1C */
    __vo uint32_t APB1RSTR;       /*!< RCC APB1 peripheral reset register,        Offset: 0x20 */
    __vo uint32_t APB2RSTR;       /*!< RCC APB2 peripheral reset register,        Offset: 0x24 */
    uint32_t      RESERVED1[2];   /*!< Reserved,                                  Offset: 0x28-0x2C */
    __vo uint32_t AHB1ENR;        /*!< RCC AHB1 peripheral clock enable register, Offset: 0x30 */
    __vo uint32_t AHB2ENR;        /*!< RCC AHB2 peripheral clock enable register, Offset: 0x34 */
    __vo uint32_t AHB3ENR;        /*!< RCC AHB3 peripheral clock enable register, Offset: 0x38 */
    uint32_t      RESERVED2;      /*!< Reserved,                                  Offset: 0x3C */
    __vo uint32_t APB1ENR;        /*!< RCC APB1 peripheral clock enable register, Offset: 0x40 */
    __vo uint32_t APB2ENR;        /*!< RCC APB2 peripheral clock enable register, Offset: 0x44 */
    /* ... other registers can be added here as needed */
} RCC_RegDef;

/**
 * @brief External Interrupt/Event (EXTI) Register Definition Structure
 */
typedef struct
{
    __vo uint32_t IMR;      /*!< Interrupt mask register,                   Offset: 0x00 */
    __vo uint32_t EMR;      /*!< Event mask register,                       Offset: 0x04 */
    __vo uint32_t RTSR;     /*!< Rising trigger selection register,         Offset: 0x08 */
    __vo uint32_t FTSR;     /*!< Falling trigger selection register,        Offset: 0x0C */
    __vo uint32_t SWIER;    /*!< Software interrupt event register,         Offset: 0x10 */
    __vo uint32_t PR;       /*!< Pending register,                          Offset: 0x14 */
} EXTI_RegDef;

/**
 * @brief System Configuration (SYSCFG) Register Definition Structure
 * @note  Based on the register map, with reserved gaps included
 * to ensure correct member offsets.
 */
typedef struct
{
    __vo uint32_t MEMRMP;       /*!< SYSCFG memory remap register,                   Offset: 0x00 */
    __vo uint32_t PMC;          /*!< SYSCFG peripheral mode configuration register,  Offset: 0x04 */
    __vo uint32_t EXTICR[4];      /*!< SYSCFG external interrupt configuration reg 1,  Offset: 0x08 */
//    __vo uint32_t EXTICR2;      /*!< SYSCFG external interrupt configuration reg 2,  Offset: 0x0C */
//    __vo uint32_t EXTICR3;      /*!< SYSCFG external interrupt configuration reg 3,  Offset: 0x10 */
//    __vo uint32_t EXTICR4;      /*!< SYSCFG external interrupt configuration reg 4,  Offset: 0x14 */
    uint32_t      RESERVED1[2]; /*!< Reserved, 0x18-0x1C */
    __vo uint32_t CMPCR;        /*!< Compensation cell control register,             Offset: 0x20 */
    uint32_t      RESERVED2[2]; /*!< Reserved, 0x24-0x28 */
    __vo uint32_t CFGR;         /*!< SYSCFG configuration register,                  Offset: 0x2C */
} SYSCFG_RegDef;


/******************************************************************************/
/* */
/* PERIPHERAL ACCESS MACROS (POINTERS)                        */
/* */
/******************************************************************************/
/**
 * @defgroup Peripheral_Access_Macros Peripheral Access Macros
 * @{
 */
#define GPIOA   ((GPIO_RegDef*)GPIOA_BASEADDR)
#define GPIOB   ((GPIO_RegDef*)GPIOB_BASEADDR)
#define GPIOC   ((GPIO_RegDef*)GPIOC_BASEADDR)
#define GPIOD   ((GPIO_RegDef*)GPIOD_BASEADDR)
#define GPIOE   ((GPIO_RegDef*)GPIOE_BASEADDR)
#define GPIOF   ((GPIO_RegDef*)GPIOF_BASEADDR)
#define GPIOG   ((GPIO_RegDef*)GPIOG_BASEADDR)
#define GPIOH   ((GPIO_RegDef*)GPIOH_BASEADDR)

#define RCC     ((RCC_RegDef*)RCC_BASEADDR)
#define EXTI    ((EXTI_RegDef*)EXTI_BASEADDR)
#define SYSCFG  ((SYSCFG_RegDef*)SYSCFG_BASEADDR) // <-- FIX: Uncommented this line

/**
 * @}
 */

/******************************************************************************/
/* */
/* PERIPHERAL CLOCK & RESET MACROS                          */
/* */
/******************************************************************************/

/**
 * @defgroup GPIO_Clock_Enable_Disable GPIO Clock Enable/Disable Macros
 * @{
 */
#define GPIOA_PCLK_EN()    (RCC->AHB1ENR |= (1 << 0))
#define GPIOB_PCLK_EN()    (RCC->AHB1ENR |= (1 << 1))
#define GPIOC_PCLK_EN()    (RCC->AHB1ENR |= (1 << 2))
#define GPIOD_PCLK_EN()    (RCC->AHB1ENR |= (1 << 3))
#define GPIOE_PCLK_EN()    (RCC->AHB1ENR |= (1 << 4))
#define GPIOF_PCLK_EN()    (RCC->AHB1ENR |= (1 << 5))
#define GPIOG_PCLK_EN()    (RCC->AHB1ENR |= (1 << 6))
#define GPIOH_PCLK_EN()    (RCC->AHB1ENR |= (1 << 7))

#define GPIOA_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 0))
#define GPIOB_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 4))
#define GPIOF_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 5))
#define GPIOG_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 6))
#define GPIOH_PCLK_DI()    (RCC->AHB1ENR &= ~(1 << 7))
/**
 * @}
 */

/**
 * @defgroup SYSCFG_Clock_Enable_Disable SYSCFG Clock Enable/Disable Macros
 * @{
 */
#define SYSCFG_PCLK_EN()   (RCC->APB2ENR |= (1 << 14))
#define SYSCFG_PCLK_DI()   (RCC->APB2ENR &= ~(1 << 14))
/**
 * @}
 */
// port to base address
#define GPIO_BASEADDR_TO_PORTCODE(x)        ((x==GPIOA)? 0:\
											(x==GPIOB)? 1:\
											(x==GPIOC)? 2:\
											(x==GPIOD)? 3:\
											(x==GPIOE)? 4:\
											(x==GPIOF)? 5:\
											(x==GPIOG)? 6:\
											(x==GPIOH)? 7:)

/**
 * @defgroup GPIO_Reset_Macros GPIO Peripheral Reset Macros
 * @brief These macros perform a forced reset on the GPIO peripheral by setting
 * and then clearing the corresponding bit in the AHB1RSTR register.
 * @{
 */
#define GPIOA_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1 << 0)); } while(0)
#define GPIOB_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1 << 1)); } while(0)
#define GPIOC_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1 << 2)); } while(0)
#define GPIOD_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1 << 3)); } while(0)
#define GPIOE_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1 << 4)); } while(0)
#define GPIOF_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1 << 5)); } while(0)
#define GPIOG_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1 << 6)); } while(0)
#define GPIOH_REG_RESET()   do{ (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1 << 7)); } while(0)
/**
 * @}
 */


/*
 * Include the driver header file that will *use* this MCU-specific header
 */
// #include "STM32F446RE_GPIO_DRIVER.h" // <-- FIX: Removed this line. This caused a circular dependency.

#endif /* STM32F446RE_H_ */
