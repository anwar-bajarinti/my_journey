/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */



#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Simple bare-metal RCC configuration (HSE & PLL example)
 ******************************************************************************
 */

#include <stdint.h>

// Base address of RCC (Reset and Clock Control)
#define RCC_BASE      0x40023800UL

// RCC register offsets
#define RCC_CR        (*(volatile uint32_t *)(RCC_BASE + 0x00))   // Clock control register
#define RCC_CFGR      (*(volatile uint32_t *)(RCC_BASE + 0x08))   // Clock configuration register

int main(void)
{
    // 1. Enable HSE (High-Speed External) oscillator
    RCC_CR |= (1 << 16);   // HSEON = 1 (bit 16)

    // 2. Wait until HSE is ready (HSERDY flag bit 17)
    while(!(RCC_CR & (1 << 17)));

    // 3. Select HSE as system clock source (SW bits [1:0] = 01)
    RCC_CFGR &= ~(3 << 0);   // Clear SW bits
    RCC_CFGR |=  (1 << 0);   // Set SW = 01 (HSE selected)

    // 4. Optionally wait until HSE becomes system clock
    while(((RCC_CFGR >> 2) & 0x3) != 0x01);

    // Loop forever
    for(;;);
}
